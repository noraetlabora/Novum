{
  "x-generator": "NSwag v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v12.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "OrderSolution HTTP API",
    "version": "0.0.0"
  },
  "host": "10.0.0.136:12346",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json-patch+json",
    "application/json",
    "text/json",
    "application/*+json"
  ],
  "paths": {
    "/Documentation/Index": {
      "undefined": {
        "tags": [
          "Documentation"
        ],
        "operationId": "Documentation_Index",
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/api/v2/data/CancellationReasons": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "CancellationReasons_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CancellationReason"
              }
            }
          }
        }
      }
    },
    "/api/v2/HostStatus": {
      "get": {
        "tags": [
          "host"
        ],
        "summary": "Get the status of the host / POS. This will be regularly called by clients to detect status changes (like host / POS restarts)",
        "operationId": "HostStatus_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PosStatus"
            }
          }
        }
      }
    },
    "/api/v2/data/OsConfiguration": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "OsConfiguration_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OsConfiguration"
            }
          }
        }
      }
    },
    "/api/v2/data/PaymentMedia": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "PaymentMedia_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMedia"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/Printers": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "Printers_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Printer"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/Articles": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "Articles_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Article"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/Categories": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "Categories_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      }
    },
    "/api/v2/images/fax/{id}": {
      "get": {
        "tags": [
          "images/fax"
        ],
        "operationId": "FaxImage_Get",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "file"
            }
          }
        }
      },
      "put": {
        "tags": [
          "images/fax"
        ],
        "summary": "Replace an existing fax image on the server.\nNOTE: The data will be read from the body as raw binary bytes.",
        "operationId": "FaxImage_Put",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the fax image to overwrite.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/images/fax": {
      "post": {
        "tags": [
          "images/fax"
        ],
        "summary": "Store a new fax image on the server.\nNOTE: The data will be read from the body as raw binary bytes.",
        "operationId": "FaxImage_Post",
        "parameters": [
          {
            "type": "string",
            "name": "subTableId",
            "in": "query",
            "description": "Context information about the sub table to which the fax image is planned to be sent for.\nWhen later reffering to the fax image id we will always do so in the context of that sub table.\nThis also means in case the sub table is not valid anymore (e.g. closed via payment) the OrderSolution also does not have a need for\nthat image anymore which means the image can safely be deleted (from the OrderSolution perspective).",
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "description": "On success it will return the location of the newly stored image in location header."
          },
          "400": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OsError"
            }
          },
          "403": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OsError"
            }
          }
        }
      }
    },
    "/api/v2/data/ModifierGroups": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "ModifierGroups_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModifierGroup"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/OrderLines": {
      "get": {
        "tags": [
          "runtime data"
        ],
        "summary": "Get the order lines possibly filtered by the sub table id.\nNOTE: Only commited order lines (where actions/tables/FinalizeOrder was called) will be returned by this call.",
        "operationId": "OrderLines_Get",
        "parameters": [
          {
            "type": "string",
            "name": "subTableId",
            "in": "query",
            "description": "The sub table ID getting orderlines for.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "status",
            "in": "query",
            "description": "If specified the status of the orderlines that are required.\n            If not provided all orderlines with status Ordered and Committed are returned",
            "x-schema": {
              "$ref": "#/definitions/OrderLineStatus"
            },
            "x-nullable": true,
            "enum": [
              "unknown",
              "ordered",
              "committed",
              "paid"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Orderlines with their unpaid quantity/price",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderLine"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/ServiceAreas": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "ServiceAreas_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceArea"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/Tables": {
      "get": {
        "tags": [
          "runtime data"
        ],
        "summary": "Get open tables for the service area.",
        "operationId": "Tables_GetOpen",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "serviceAreaId",
            "in": "query",
            "description": "The service area id of the service area.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "open tables array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TableResult"
              }
            }
          }
        }
      }
    },
    "/api/v2/data/Users": {
      "get": {
        "tags": [
          "data"
        ],
        "operationId": "Users_Get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "/api/v2/actions/Auth/Login": {
      "post": {
        "tags": [
          "actions"
        ],
        "summary": "Execute a login transaciton. NOTE: Will set an \"AuthToken\" cookie needed in later authorized requests.",
        "operationId": "Auth_Login",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUser"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OsError"
            }
          }
        }
      }
    },
    "/api/v2/actions/Auth/Logout": {
      "post": {
        "tags": [
          "actions"
        ],
        "operationId": "Auth_Logout",
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/actions/Init/RegisterClient": {
      "post": {
        "tags": [
          "actions"
        ],
        "summary": "Get initialization data for the client.\nClients will have to call transactions/login to execute meaningful transactions.",
        "operationId": "Init_RegisterClient",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientData",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientInfo"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/POSInfo"
            }
          },
          "412": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OsError"
            }
          },
          "400": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OsError"
            }
          }
        }
      }
    },
    "/api/v2/actions/Init/RegisterGateway": {
      "post": {
        "tags": [
          "actions"
        ],
        "operationId": "Init_RegisterGateway",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "gatewayInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayInfo"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "x-nullable": true,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/api/v2/actions/OrderLines/Void/{orderLineId}": {
      "post": {
        "tags": [
          "actions/orderlines"
        ],
        "summary": "Void an orderline or a given quantity of it.",
        "operationId": "OrderLines_Void",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "orderLineId",
            "in": "path",
            "required": true,
            "description": "The order line id to void / to reduce the quantity of.",
            "x-nullable": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "Details about the void operation to be executed on this orderline. \n            If null the whole orderline will be voided.",
            "schema": {
              "$ref": "#/definitions/OrderLineVoid"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrderLineVoidResult"
            }
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/actions/OrderLines/Add/{subTableId}": {
      "post": {
        "tags": [
          "actions/orderlines"
        ],
        "operationId": "OrderLines_Add",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "subTableId",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderLineAdd"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrderLineResult"
            }
          }
        }
      }
    },
    "/api/v2/actions/OrderLines/ModifyUncommitted/{orderLineId}": {
      "post": {
        "tags": [
          "actions/orderlines"
        ],
        "summary": "Modifies (= replaces) an uncommited orderline.\nIMPORTANT: Any existing modifiers of the orderline are replaced with the new modifiers. \nFor example if an orderline \"1x Coke with ice\" is modified to be \"1x Coke with Citron\" the ice is also gone\nso the operation works as a replacement and not as a patch of the existing data.",
        "operationId": "OrderLines_ModifyUncommitted",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "orderLineId",
            "in": "path",
            "required": true,
            "description": "The orderline to be modified / replaced",
            "x-nullable": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "The new data to be used for this order line (same as for the add request)",
            "schema": {
              "$ref": "#/definitions/OrderLineModify"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": true,
            "description": "OrderLineResult informing about the new ids / prices of the modified orderline.",
            "schema": {
              "$ref": "#/definitions/OrderLineResult"
            }
          }
        }
      }
    },
    "/api/v2/actions/Pay/SubTables": {
      "post": {
        "tags": [
          "actions/pay"
        ],
        "summary": "Pay sub full subtables. If the pay action is executed successfully the subtables will be fully paid and clsoed.",
        "operationId": "Pay_SubTables",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "Pay data describing which payments have to be executed for which subtables",
            "schema": {
              "$ref": "#/definitions/PaySubTables"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "OK in case the payment was successfull and the receipt is moved to the printer queue."
          }
        }
      }
    },
    "/api/v2/actions/Pay/OrderLines": {
      "post": {
        "tags": [
          "actions/pay"
        ],
        "operationId": "Pay_OrderLines",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayOrderLines"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/actions/SubTables/Create": {
      "post": {
        "tags": [
          "actions/subtables"
        ],
        "summary": "Create a new subtable.",
        "operationId": "SubTables_Create",
        "parameters": [
          {
            "type": "string",
            "name": "tableId",
            "in": "query",
            "description": "The table this sub table is created for.",
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubTable"
            }
          }
        }
      }
    },
    "/api/v2/actions/Tables/OpenByName/{name}": {
      "post": {
        "tags": [
          "actions/tables"
        ],
        "summary": "Open table by name. If it does not exist it will be created.",
        "operationId": "Tables_OpenByName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The ID or Name of the table to be opened.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "serviceAreaId",
            "in": "query",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "prePayment",
            "in": "query",
            "description": "If provided defines if the request is in preparation of a payment action.",
            "default": false,
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableResult"
            }
          },
          "201": {
            "x-nullable": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableResult"
            }
          }
        }
      }
    },
    "/api/v2/actions/Tables/FinalizeOrder/{tableId}": {
      "post": {
        "tags": [
          "actions/tables"
        ],
        "summary": "Finalize the current order so that they the open orders are commited and the table is getting unlocked.",
        "operationId": "Tables_FinalizeOrder",
        "parameters": [
          {
            "type": "string",
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "Table to commit orders for.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "409": {
            "description": ""
          }
        }
      }
    },
    "/api/v2/actions/Tables/CancelOrder/{tableId}": {
      "post": {
        "tags": [
          "actions/tables"
        ],
        "summary": "Cancles the current order procedure for the table. The table will be unlocked and all uncommited orders will be deleted.",
        "operationId": "Tables_CancelOrder",
        "parameters": [
          {
            "type": "string",
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "The table to work on.",
            "x-nullable": true
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "409": {
            "description": ""
          }
        }
      }
    }
  },
  "definitions": {
    "CancellationReason": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PosStatus": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "Whenever the POS is restarted this session should change to allow the gateway to detect restarts."
        }
      }
    },
    "OsConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "global": {
          "type": "object",
          "description": "Key = key of configuration\nValue = value of the configuration",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PaymentMedia": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "allowOverPayment"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "allowOverPayment": {
          "type": "integer",
          "description": "Optional. 0 = when using this media the app will not allow to enter a higher payment amount as to be paid. 1 = over payment is allowed",
          "format": "int32"
        }
      }
    },
    "Printer": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The friendly name of the printer informing the employee about which printer it is\nor where the printer might be connected to (like if it is a belt printer it should be clear\nfrom the name to which handheld this belt printer is connected to)"
        },
        "path": {
          "type": "string",
          "description": "The path of the printer used to define the printer to which a print job is sent"
        }
      }
    },
    "Article": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "mustEnterPrice"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "receiptName": {
          "type": "string"
        },
        "plu": {
          "type": "string"
        },
        "mustEnterPrice": {
          "type": "integer",
          "description": "Defines if the Article force price entry when ordered.\n0 = not forced; 1 = price entry forced",
          "format": "int32"
        },
        "modifierGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArticleModifierGroup"
          }
        }
      }
    },
    "ArticleModifierGroup": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "modifierGroupId": {
          "type": "string"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "Category": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryContentEntry"
          }
        }
      }
    },
    "CategoryContentEntry": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "category": {
          "$ref": "#/definitions/Category"
        },
        "articleId": {
          "type": "string"
        }
      }
    },
    "OsError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "errorMsg": {
          "type": "string"
        }
      }
    },
    "ModifierGroup": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "question": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ModifierType"
        },
        "minChoices": {
          "type": "integer",
          "format": "int32"
        },
        "maxChoices": {
          "type": "integer",
          "format": "int32"
        },
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierChoice"
          }
        }
      }
    },
    "ModifierType": {
      "type": "string",
      "description": "0 – pickOne - One option to select from ModifierGroupChoices.\n1 – pickMultiple - Select several options from ModifierGroupChoices.\n2 – pickNumeric - Select numeric choices from ModifierGroupChoices\n3 – textInput -  Asks for arbitary text input\n4 – faxInput - Asks for handwritten input",
      "x-enumNames": [
        "PickOne",
        "PickMultiple",
        "PickNumeric",
        "textInput",
        "faxInput"
      ],
      "enum": [
        "pickOne",
        "pickMultiple",
        "pickNumeric",
        "textInput",
        "faxInput"
      ]
    },
    "ModifierChoice": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "receiptName": {
          "type": "string"
        },
        "defaultAmount": {
          "type": "integer",
          "format": "int32"
        },
        "minAmount": {
          "type": "integer",
          "format": "int32"
        },
        "maxAmount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderLine": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "quantity",
        "singlePrice",
        "status"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "articleId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "description": "The unpaid quantity of this orderline.",
          "format": "int32"
        },
        "singlePrice": {
          "type": "integer",
          "description": "The unpaid price of this orderline.",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/OrderLineStatus"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineModifier"
          }
        }
      }
    },
    "OrderLineStatus": {
      "type": "string",
      "description": "Represents the status of a given Orderline.\nUnknown = 0,\nOrdered = 1, // This orderline was not yet commited/confirmed\nCommitted = 2,\nPaid = 3",
      "x-enumNames": [
        "Unknown",
        "Ordered",
        "Committed",
        "Paid"
      ],
      "enum": [
        "unknown",
        "ordered",
        "committed",
        "paid"
      ]
    },
    "OrderLineModifier": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "modifierGroupId": {
          "type": "string"
        },
        "textInput": {
          "type": "string"
        },
        "faxInputID": {
          "type": "string",
          "description": "The ID of the FaxInput image. Can be a number, url, ...\nThe format if this ID is defined by the POS storage behavior.\nTODO: When the FaxInput storage API is defined we may have to update this."
        },
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineModifierChoice"
          }
        }
      }
    },
    "OrderLineModifierChoice": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "modifierChoiceId": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int32"
        },
        "choicePrice": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ServiceArea": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TableResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "lastActivityTime",
        "bookedAmount"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastActivityTime": {
          "type": "integer",
          "format": "int32"
        },
        "bookedAmount": {
          "type": "integer",
          "format": "int32"
        },
        "subTables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubTable"
          }
        },
        "serviceAreaId": {
          "type": "string"
        }
      }
    },
    "SubTable": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isSelected": {
          "type": "boolean"
        }
      }
    },
    "User": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "The user / employee identifier.\nWill be used in the auth/login action."
        },
        "name": {
          "type": "string",
          "description": "The employees real name like John Doe.\nThis name will be shown on the statusbar of the clients after login"
        }
      }
    },
    "LoginUser": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "description": "For example when doing user selection via list with PIN the Id is the id of the employee selected from the list of data/employees."
        },
        "password": {
          "type": "string",
          "description": "Optional. Only provided if a real login authentication procedure was executed.\nFor example when doing user selection via list with PIN the PIN is the password."
        }
      }
    },
    "POSInfo": {
      "type": "object",
      "description": "Provides site specific data on successful initialization.",
      "additionalProperties": false,
      "required": [
        "utcTime"
      ],
      "properties": {
        "restaurantName": {
          "type": "string",
          "description": "The name of the restaurant we are working with."
        },
        "utcTime": {
          "type": "integer",
          "description": "The current UTC time stamp (in seconds since epoch time).\nUsed for synchronization between clients and the server.",
          "format": "int32"
        },
        "clientName": {
          "type": "string",
          "description": "If provided this name will be shown in the connection / login screen instead of the device name configured in the device (done via SC2).\nIf not provided the original name as provided in the request / ClientInfo is shown."
        }
      }
    },
    "ClientInfo": {
      "type": "object",
      "description": "Holds data about the remote client application / device that want's to communicate with the POS system.",
      "additionalProperties": false,
      "properties": {
        "version": {
          "type": "string",
          "description": "The version of the remote client application we are talking to."
        },
        "id": {
          "type": "string",
          "description": "The id of the remote client we are talking to. (should consist of an application name + device serial nummber)"
        },
        "clientName": {
          "type": "string",
          "description": "The configured device name that can be configured via SC2 and is shown in our top status bar in the connect screen."
        },
        "printerPath": {
          "type": "string",
          "description": "Optional. A path to the printer that can be used for send print jobs to this client if it supports them.\nFor Orderman handheld devices this path will be provided if an Orderman belt printer is paired with that device.\nTo send print jobs you can use the \"/printers\" api of the OsServer instance this init request was coming from.\nExample (we assume the OsServer is running on local host and it's httpApi port is configured to 12344:\n    - You receive the path \"/printers/125-49944541\"\n    - You can query details about this printer via \"GET http://localhost:12344/api/v1/printers/125-49944541\"\n    - To send a new print job: \"POST http://localhost:12344/api/v1/printers/125-49944541/jobs\" which will return \n      with a print job id immediately (in this example 38428)\n    - to query the print job status: \"GET http://localhost:12344/api/v1/printers/125-49944541/jobs/38428\""
        }
      }
    },
    "GatewayInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "httpApiPort": {
          "type": "integer",
          "description": "The gateways port at which we can query status via http. For OsServer the default configuration in the configuration file is 12344.\nIf omitted the gatway does not support status queries.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "The gatways name. In case of OsServer this name is defined in the servers configuration file."
        },
        "id": {
          "type": "string",
          "description": "The gatways ID. In case of an OsServer this ID is automatically generated on first start or set via the configuration file."
        },
        "gatewaySessionId": {
          "type": "string",
          "description": "The session ID of the gatway. It will change whenever the gateway restarts."
        }
      }
    },
    "OrderLineVoidResult": {
      "type": "object",
      "description": "Provides information about the new status of the orderline after void processing.",
      "additionalProperties": false,
      "required": [
        "singlePrice",
        "quantity"
      ],
      "properties": {
        "orderLineId": {
          "type": "string"
        },
        "singlePrice": {
          "type": "integer",
          "format": "int32"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderLineVoid": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "quantity": {
          "type": "integer",
          "description": "Defines the quantity that is voided from an existing orderline.\nIf the quanity is 0 nothing is changed.\nIf the quantity is &gt;= the quantity of the orderline the whole orderline will be voided.",
          "format": "int32"
        },
        "cancellationReasonId": {
          "type": "string",
          "description": "Defines the cancellation reasion that must be provided if a already commited orderline should\nbe voided."
        }
      }
    },
    "OrderLineResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "singlePrice"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "singlePrice": {
          "type": "integer",
          "format": "int32"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineResultModifier"
          }
        }
      }
    },
    "OrderLineResultModifier": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        },
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineResultModifierChoice"
          }
        }
      }
    },
    "OrderLineResultModifierChoice": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "modifierChoiceId": {
          "type": "string"
        },
        "choicePrice": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderLineAdd": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "quantity": {
          "type": "integer",
          "description": "The quantity for this order line. When adding a new order line this value must be set.",
          "format": "int32"
        },
        "enteredPrice": {
          "type": "integer",
          "description": "Defines a manual price for this order line.\nNOTE: You must not provide this parameter if you want the price to be calculated by the POS.",
          "format": "int32"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineModifier2"
          }
        },
        "articleId": {
          "type": "string"
        }
      }
    },
    "OrderLineModifier2": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "modifierGroupId": {
          "type": "string"
        },
        "textInput": {
          "type": "string"
        },
        "faxInputID": {
          "type": "string",
          "description": "The ID of the FaxInput image. Can be a number, url, ...\nThe format if this ID is defined by the POS storage behavior.\nTODO: When the FaxInput storage API is defined we may have to update this."
        },
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineModifierChoice2"
          }
        }
      }
    },
    "OrderLineModifierChoice2": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "modifierChoiceId": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderLineModify": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "quantity": {
          "type": "integer",
          "description": "The quantity for this order line. When adding a new order line this value must be set.",
          "format": "int32"
        },
        "enteredPrice": {
          "type": "integer",
          "description": "Defines a manual price for this order line.\nNOTE: You must not provide this parameter if you want the price to be calculated by the POS.",
          "format": "int32"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineModifier2"
          }
        }
      }
    },
    "PaySubTables": {
      "allOf": [
        {
          "$ref": "#/definitions/PayBase"
        },
        {
          "type": "object",
          "description": "Pay data describing which payments have to be executed for paying full subtables with all their order lines.",
          "additionalProperties": false,
          "required": [
            "subTableIds"
          ],
          "properties": {
            "subTableIds": {
              "type": "array",
              "description": "Array of sub table ids. The sum of the amount of all these subtables together will be paid by \nPayments.\nNOTE: The sub table IDs can only be from the same table. An error will be returned if they are from more then one\ntable.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PayBase": {
      "type": "object",
      "description": "Base type for executing payments for something and execute print jobs (like for the bill for that payment).",
      "x-abstract": true,
      "additionalProperties": false,
      "properties": {
        "payments": {
          "type": "array",
          "description": "The payments to be executed on teh amount sum we get from all the sub tables in SubTableIds.\nSpecial Case: Empty payments / Payments omitted is used to close empty tables.",
          "items": {
            "$ref": "#/definitions/Payment"
          }
        },
        "printer": {
          "type": "string",
          "description": "Identifies the printer to send the receipt print job to. \nexample: 'local://1'\ncheck GET /api/v2/data/Printers to get a list of supported print targets"
        }
      }
    },
    "Payment": {
      "type": "object",
      "description": "Describes a single payment done. A receipt can be paid with several different payments.",
      "additionalProperties": false,
      "required": [
        "amountPaid"
      ],
      "properties": {
        "amountPaid": {
          "type": "integer",
          "description": "The amount that will get paid.",
          "format": "int32"
        },
        "paymentMediaId": {
          "type": "string",
          "description": "The payment media type (id) used for this amount. (example: Cash, Credit Card, ...)"
        }
      }
    },
    "PayOrderLines": {
      "allOf": [
        {
          "$ref": "#/definitions/PayBase"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "paidLines": {
              "type": "array",
              "description": "List of order line payments that represent the orderlines (-parts) that will be paied with this set.",
              "items": {
                "$ref": "#/definitions/OrderLineQuanity"
              }
            }
          }
        }
      ]
    },
    "OrderLineQuanity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "quantity"
      ],
      "properties": {
        "orderLineId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  }
}