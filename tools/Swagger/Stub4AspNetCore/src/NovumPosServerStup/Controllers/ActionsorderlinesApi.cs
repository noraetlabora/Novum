/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using NovumPosServerStup.Attributes;
using NovumPosServerStup.Models;

namespace NovumPosServerStup.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ActionsorderlinesApiController : Controller
    { 
        /// <summary>
        /// Add a new orderline to a sub table. (e.g. when the waiter orders an article on a table)
        /// </summary>
        
        /// <param name="subTableId">The ID of the subtable to add the order line to. Note: Orders are always part of a subtable and subtables are part of a table. This means at least 1 subtable exists for each table to allow ordering / adding orderlines.</param>
        /// <param name="data">The orderline to add.</param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/api/v2/actions/OrderLines/Add/{subTableId}")]
        [ValidateModelState]
        [SwaggerOperation("OrderLinesAdd")]
        [SwaggerResponse(statusCode: 201, type: typeof(OrderLineResult), description: "")]
        public virtual IActionResult OrderLinesAdd([FromRoute][Required]string subTableId, [FromBody]OrderLineAdd data)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(OrderLineResult));

            string exampleJson = null;
            exampleJson = "{\r\n  \"singlePrice\" : 0,\r\n  \"id\" : \"id\",\r\n  \"modifiers\" : [ {\r\n    \"id\" : \"id\",\r\n    \"choices\" : [ {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    }, {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    } ]\r\n  }, {\r\n    \"id\" : \"id\",\r\n    \"choices\" : [ {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    }, {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    } ]\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderLineResult>(exampleJson)
            : default(OrderLineResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modifies (&#x3D; replaces) an uncommited orderline. IMPORTANT: Any existing modifiers of the orderline are replaced with the new modifiers.  For example if an orderline \&quot;1x Coke with ice\&quot; is modified to be \&quot;1x Coke with Citron\&quot; the ice is also gone so the operation works as a replacement and not as a patch of the existing data.
        /// </summary>
        
        /// <param name="orderLineId">The orderline to be modified / replaced</param>
        /// <param name="data">The new data to be used for this order line (same as for the add request)</param>
        /// <response code="201">OrderLineResult informing about the new ids / prices of the modified orderline.</response>
        [HttpPost]
        [Route("/api/v2/actions/OrderLines/ModifyUncommitted/{orderLineId}")]
        [ValidateModelState]
        [SwaggerOperation("OrderLinesModifyUncommitted")]
        [SwaggerResponse(statusCode: 201, type: typeof(OrderLineResult), description: "OrderLineResult informing about the new ids / prices of the modified orderline.")]
        public virtual IActionResult OrderLinesModifyUncommitted([FromRoute][Required]string orderLineId, [FromBody]OrderLineModify data)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(OrderLineResult));

            string exampleJson = null;
            exampleJson = "{\r\n  \"singlePrice\" : 0,\r\n  \"id\" : \"id\",\r\n  \"modifiers\" : [ {\r\n    \"id\" : \"id\",\r\n    \"choices\" : [ {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    }, {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    } ]\r\n  }, {\r\n    \"id\" : \"id\",\r\n    \"choices\" : [ {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    }, {\r\n      \"choicePrice\" : 6,\r\n      \"modifierChoiceId\" : \"modifierChoiceId\"\r\n    } ]\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderLineResult>(exampleJson)
            : default(OrderLineResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Void an orderline or a given quantity of it.
        /// </summary>
        
        /// <param name="orderLineId">The order line id to void / to reduce the quantity of.</param>
        /// <param name="data">Details about the void operation to be executed on this orderline.              If null the whole orderline will be voided.</param>
        /// <response code="200"></response>
        /// <response code="204"></response>
        [HttpPost]
        [Route("/api/v2/actions/OrderLines/Void/{orderLineId}")]
        [ValidateModelState]
        [SwaggerOperation("OrderLinesVoid")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderLineVoidResult), description: "")]
        public virtual IActionResult OrderLinesVoid([FromRoute][Required]string orderLineId, [FromBody]OrderLineVoid data)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OrderLineVoidResult));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            string exampleJson = null;
            exampleJson = "{\r\n  \"singlePrice\" : 0,\r\n  \"quantity\" : 6,\r\n  \"orderLineId\" : \"orderLineId\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OrderLineVoidResult>(exampleJson)
            : default(OrderLineVoidResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
