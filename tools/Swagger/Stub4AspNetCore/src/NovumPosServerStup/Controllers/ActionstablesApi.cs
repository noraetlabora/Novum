/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using NovumPosServerStup.Attributes;
using NovumPosServerStup.Models;

namespace NovumPosServerStup.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ActionstablesApiController : Controller
    { 
        /// <summary>
        /// Cancles the current order procedure for the table. The table will be unlocked and all uncommited orders will be deleted.
        /// </summary>
        
        /// <param name="tableId">The table to work on.</param>
        /// <response code="204"></response>
        /// <response code="401"></response>
        /// <response code="403"></response>
        /// <response code="409"></response>
        [HttpPost]
        [Route("/api/v2/actions/Tables/CancelOrder/{tableId}")]
        [ValidateModelState]
        [SwaggerOperation("TablesCancelOrder")]
        public virtual IActionResult TablesCancelOrder([FromRoute][Required]string tableId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Finalize the current order so that they the open orders are commited and the table is getting unlocked.
        /// </summary>
        
        /// <param name="tableId">Table to commit orders for.</param>
        /// <response code="204"></response>
        /// <response code="401"></response>
        /// <response code="403"></response>
        /// <response code="409"></response>
        [HttpPost]
        [Route("/api/v2/actions/Tables/FinalizeOrder/{tableId}")]
        [ValidateModelState]
        [SwaggerOperation("TablesFinalizeOrder")]
        public virtual IActionResult TablesFinalizeOrder([FromRoute][Required]string tableId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Open table by name. If it does not exist it will be created.
        /// </summary>
        
        /// <param name="name">The Name of the table to be opened. Is unique in the service area defined.</param>
        /// <param name="serviceAreaId">The ID of the service area in which the table should be opened.</param>
        /// <param name="prePayment">If provided defines if the request is in preparation of a payment action.</param>
        /// <response code="200"></response>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/api/v2/actions/Tables/OpenByName/{name}")]
        [ValidateModelState]
        [SwaggerOperation("TablesOpenByName")]
        [SwaggerResponse(statusCode: 200, type: typeof(TableResult), description: "")]
        [SwaggerResponse(statusCode: 201, type: typeof(TableResult), description: "")]
        public virtual IActionResult TablesOpenByName([FromRoute][Required]string name, [FromQuery]string serviceAreaId, [FromQuery]bool? prePayment)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TableResult));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(TableResult));

            string exampleJson = null;
            exampleJson = "{\r\n  \"bookedAmount\" : 6,\r\n  \"subTables\" : [ {\r\n    \"name\" : \"name\",\r\n    \"isSelected\" : true,\r\n    \"id\" : \"id\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"isSelected\" : true,\r\n    \"id\" : \"id\"\r\n  } ],\r\n  \"name\" : \"name\",\r\n  \"id\" : \"id\",\r\n  \"lastActivityTime\" : 0,\r\n  \"serviceAreaId\" : \"serviceAreaId\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TableResult>(exampleJson)
            : default(TableResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
