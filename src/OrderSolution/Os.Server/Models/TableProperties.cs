/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TableProperties : IEquatable<TableProperties>
    {
        /// <summary>
        /// The number of covers / guests currently set for this table. If undefined the number of covers have not yet been set. Note: At the moment the OrderSolution is not actively using this value but is just used to collect / modify this data for POS side use.
        /// </summary>
        /// <value>The number of covers / guests currently set for this table. If undefined the number of covers have not yet been set. Note: At the moment the OrderSolution is not actively using this value but is just used to collect / modify this data for POS side use.</value>
        [DataMember(Name = "numberOfCovers")]
        public int? NumberOfCovers { get; set; }

        /// <summary>
        /// The guest types configured for this table. This is one out of the list of available guest types from GET .../data/guestTypes NOTE: Typically only a single guest type will be set but in future new features might allow to set multiple.
        /// </summary>
        /// <value>The guest types configured for this table. This is one out of the list of available guest types from GET .../data/guestTypes NOTE: Typically only a single guest type will be set but in future new features might allow to set multiple.</value>
        [DataMember(Name = "guestTypes")]
        public List<string> GuestTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableProperties {\n");
            sb.Append("  NumberOfCovers: ").Append(NumberOfCovers).Append("\n");
            sb.Append("  GuestTypes: ").Append(GuestTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TableProperties)obj);
        }

        /// <summary>
        /// Returns true if TableProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of TableProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NumberOfCovers == other.NumberOfCovers ||
                    NumberOfCovers != null &&
                    NumberOfCovers.Equals(other.NumberOfCovers)
                ) &&
                (
                    GuestTypes == other.GuestTypes ||
                    GuestTypes != null &&
                    GuestTypes.SequenceEqual(other.GuestTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NumberOfCovers != null)
                    hashCode = hashCode * 59 + NumberOfCovers.GetHashCode();
                if (GuestTypes != null)
                    hashCode = hashCode * 59 + GuestTypes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TableProperties left, TableProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TableProperties left, TableProperties right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
