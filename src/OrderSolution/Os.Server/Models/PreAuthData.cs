/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PreAuthData : IEquatable<PreAuthData>
    {
        /// <summary>
        /// Array of sub table id that are planned to be paid by this medium. NOTE: The sub table IDs can only be from the same table. An error will be returned if they are from more then one table. Either SubTableIds OR Lines are defined.
        /// </summary>
        /// <value>Array of sub table id that are planned to be paid by this medium. NOTE: The sub table IDs can only be from the same table. An error will be returned if they are from more then one table. Either SubTableIds OR Lines are defined.</value>
        [DataMember(Name = "subTableIds")]
        public List<string> SubTableIds { get; set; }

        /// <summary>
        /// List of order lines that (or their parts) that are planned to be paid with this medium. NOTE: Depending on configuration also other payment media types are used in addition to pay for these      lines so it&#39;s acceptable if the requested amount is smaller than the sum of this list. Either SubTableIds OR Lines are defined.
        /// </summary>
        /// <value>List of order lines that (or their parts) that are planned to be paid with this medium. NOTE: Depending on configuration also other payment media types are used in addition to pay for these      lines so it&#39;s acceptable if the requested amount is smaller than the sum of this list. Either SubTableIds OR Lines are defined.</value>
        [DataMember(Name = "lines")]
        public List<OrderLineQuantity> Lines { get; set; }

        /// <summary>
        /// Optional. If provided this is the requested tip that the customer want&#39;s to give. NOTE: Some payment media may not be suitable for also paying tip so the tip is requested separate from the amount.
        /// </summary>
        /// <value>Optional. If provided this is the requested tip that the customer want&#39;s to give. NOTE: Some payment media may not be suitable for also paying tip so the tip is requested separate from the amount.</value>
        [DataMember(Name = "reqTip")]
        public int? ReqTip { get; set; }

        /// <summary>
        /// The amount that the customer want&#39;s to pay with this medium type. The requested amount is the sum of lines + potential overpayment. It does not include the tip.
        /// </summary>
        /// <value>The amount that the customer want&#39;s to pay with this medium type. The requested amount is the sum of lines + potential overpayment. It does not include the tip.</value>
        [Required]
        [DataMember(Name = "reqAmount")]
        public int? ReqAmount { get; set; }

        /// <summary>
        /// The ID of the payment medium the customer want&#39;s to use for this payment pre-authorization. This refers to a medium from data/paymentMedia.
        /// </summary>
        /// <value>The ID of the payment medium the customer want&#39;s to use for this payment pre-authorization. This refers to a medium from data/paymentMedia.</value>
        [DataMember(Name = "mediumID")]
        public string MediumID { get; set; }

        /// <summary>
        /// In case the payment medium is an Magnetic Stripe card the data that was read.
        /// </summary>
        /// <value>In case the payment medium is an Magnetic Stripe card the data that was read.</value>
        [DataMember(Name = "msrData")]
        public Object MsrData { get; set; }

        /// <summary>
        /// In case the user did a manual data input.
        /// </summary>
        /// <value>In case the user did a manual data input.</value>
        [DataMember(Name = "manualData")]
        public Object ManualData { get; set; }

        /// <summary>
        /// In case the payment medium is an NFC tag the data that was read from it.
        /// </summary>
        /// <value>In case the payment medium is an NFC tag the data that was read from it.</value>
        [DataMember(Name = "nfcData")]
        public Object NfcData { get; set; }

        /// <summary>
        /// In case the payment medium is a bar code the data read from it.
        /// </summary>
        /// <value>In case the payment medium is a bar code the data read from it.</value>
        [DataMember(Name = "barcodeData")]
        public Object BarcodeData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreAuthData {\n");
            sb.Append("  SubTableIds: ").Append(SubTableIds).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  ReqTip: ").Append(ReqTip).Append("\n");
            sb.Append("  ReqAmount: ").Append(ReqAmount).Append("\n");
            sb.Append("  MediumID: ").Append(MediumID).Append("\n");
            sb.Append("  MsrData: ").Append(MsrData).Append("\n");
            sb.Append("  ManualData: ").Append(ManualData).Append("\n");
            sb.Append("  NfcData: ").Append(NfcData).Append("\n");
            sb.Append("  BarcodeData: ").Append(BarcodeData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PreAuthData)obj);
        }

        /// <summary>
        /// Returns true if PreAuthData instances are equal
        /// </summary>
        /// <param name="other">Instance of PreAuthData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreAuthData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    SubTableIds == other.SubTableIds ||
                    SubTableIds != null &&
                    SubTableIds.SequenceEqual(other.SubTableIds)
                ) &&
                (
                    Lines == other.Lines ||
                    Lines != null &&
                    Lines.SequenceEqual(other.Lines)
                ) &&
                (
                    ReqTip == other.ReqTip ||
                    ReqTip != null &&
                    ReqTip.Equals(other.ReqTip)
                ) &&
                (
                    ReqAmount == other.ReqAmount ||
                    ReqAmount != null &&
                    ReqAmount.Equals(other.ReqAmount)
                ) &&
                (
                    MediumID == other.MediumID ||
                    MediumID != null &&
                    MediumID.Equals(other.MediumID)
                ) &&
                (
                    MsrData == other.MsrData ||
                    MsrData != null &&
                    MsrData.Equals(other.MsrData)
                ) &&
                (
                    ManualData == other.ManualData ||
                    ManualData != null &&
                    ManualData.Equals(other.ManualData)
                ) &&
                (
                    NfcData == other.NfcData ||
                    NfcData != null &&
                    NfcData.Equals(other.NfcData)
                ) &&
                (
                    BarcodeData == other.BarcodeData ||
                    BarcodeData != null &&
                    BarcodeData.Equals(other.BarcodeData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (SubTableIds != null)
                    hashCode = hashCode * 59 + SubTableIds.GetHashCode();
                if (Lines != null)
                    hashCode = hashCode * 59 + Lines.GetHashCode();
                if (ReqTip != null)
                    hashCode = hashCode * 59 + ReqTip.GetHashCode();
                if (ReqAmount != null)
                    hashCode = hashCode * 59 + ReqAmount.GetHashCode();
                if (MediumID != null)
                    hashCode = hashCode * 59 + MediumID.GetHashCode();
                if (MsrData != null)
                    hashCode = hashCode * 59 + MsrData.GetHashCode();
                if (ManualData != null)
                    hashCode = hashCode * 59 + ManualData.GetHashCode();
                if (NfcData != null)
                    hashCode = hashCode * 59 + NfcData.GetHashCode();
                if (BarcodeData != null)
                    hashCode = hashCode * 59 + BarcodeData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PreAuthData left, PreAuthData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PreAuthData left, PreAuthData right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
