/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Os.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MoveSubtables : IEquatable<MoveSubtables>
    { 
        /// <summary>
        /// The ids of the sub tables to be moved. CONSTRAINT: These sub tables must be part of a single table and it is not allowed to use sub tables from different tables in this request.
        /// </summary>
        /// <value>The ids of the sub tables to be moved. CONSTRAINT: These sub tables must be part of a single table and it is not allowed to use sub tables from different tables in this request.</value>
        [DataMember(Name="subTableIds")]
        public List<string> SubTableIds { get; set; }

        /// <summary>
        /// Id of the target table to move the sub tables to. CONSTRAINT: This table will only be valid if it was opened before (&#x3D; actions/tables/openByName was called).
        /// </summary>
        /// <value>Id of the target table to move the sub tables to. CONSTRAINT: This table will only be valid if it was opened before (&#x3D; actions/tables/openByName was called).</value>
        [DataMember(Name="targetTableId")]
        public string TargetTableId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoveSubtables {\n");
            sb.Append("  SubTableIds: ").Append(SubTableIds).Append("\n");
            sb.Append("  TargetTableId: ").Append(TargetTableId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MoveSubtables)obj);
        }

        /// <summary>
        /// Returns true if MoveSubtables instances are equal
        /// </summary>
        /// <param name="other">Instance of MoveSubtables to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoveSubtables other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubTableIds == other.SubTableIds ||
                    SubTableIds != null &&
                    SubTableIds.SequenceEqual(other.SubTableIds)
                ) && 
                (
                    TargetTableId == other.TargetTableId ||
                    TargetTableId != null &&
                    TargetTableId.Equals(other.TargetTableId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubTableIds != null)
                    hashCode = hashCode * 59 + SubTableIds.GetHashCode();
                    if (TargetTableId != null)
                    hashCode = hashCode * 59 + TargetTableId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MoveSubtables left, MoveSubtables right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MoveSubtables left, MoveSubtables right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
