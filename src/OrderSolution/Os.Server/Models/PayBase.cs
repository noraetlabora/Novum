/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// Base type for executing payments for something and execute print jobs (like for the bill for that payment).
    /// </summary>
    [DataContract]
    public partial class PayBase : IEquatable<PayBase>
    {
        /// <summary>
        /// The payments to be executed on the amount sum we get from all the sub tables or order lines to be paid + the tip. Special Case: Empty payments / Payments omitted is used to close empty tables.
        /// </summary>
        /// <value>The payments to be executed on the amount sum we get from all the sub tables or order lines to be paid + the tip. Special Case: Empty payments / Payments omitted is used to close empty tables.</value>
        [DataMember(Name = "payments")]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// (optional) The tip the customers want&#39;s to give to the waiter. (same format as other prices) Note: To use tip functionality \&quot;enableTip\&quot; must be \&quot;1\&quot; in osConfiguration.
        /// </summary>
        /// <value>(optional) The tip the customers want&#39;s to give to the waiter. (same format as other prices) Note: To use tip functionality \&quot;enableTip\&quot; must be \&quot;1\&quot; in osConfiguration.</value>
        [DataMember(Name = "tip")]
        public int? Tip { get; set; }

        /// <summary>
        /// Identifies the printer to send the receipt print job to.  example: &#39;local://1&#39; check GET /api/v2/data/Printers to get a list of supported print targets
        /// </summary>
        /// <value>Identifies the printer to send the receipt print job to.  example: &#39;local://1&#39; check GET /api/v2/data/Printers to get a list of supported print targets</value>
        [DataMember(Name = "printer")]
        public string Printer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayBase {\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Tip: ").Append(Tip).Append("\n");
            sb.Append("  Printer: ").Append(Printer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PayBase)obj);
        }

        /// <summary>
        /// Returns true if PayBase instances are equal
        /// </summary>
        /// <param name="other">Instance of PayBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayBase other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) &&
                (
                    Tip == other.Tip ||
                    Tip != null &&
                    Tip.Equals(other.Tip)
                ) &&
                (
                    Printer == other.Printer ||
                    Printer != null &&
                    Printer.Equals(other.Printer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                if (Tip != null)
                    hashCode = hashCode * 59 + Tip.GetHashCode();
                if (Printer != null)
                    hashCode = hashCode * 59 + Printer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PayBase left, PayBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PayBase left, PayBase right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
