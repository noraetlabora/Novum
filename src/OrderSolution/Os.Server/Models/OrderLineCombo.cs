/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// If assigned to an order line this marks the order line as a combo member.
    /// </summary>
    [DataContract]
    public partial class OrderLineCombo : IEquatable<OrderLineCombo>
    {
        /// <summary>
        /// The id of the parent order line (the combo head) this combo member belongs to.
        /// </summary>
        /// <value>The id of the parent order line (the combo head) this combo member belongs to.</value>
        [DataMember(Name = "parentId")]
        public string ParentId { get; set; }

        /// <summary>
        /// The id of the combo group from which this combo member was ordered.
        /// </summary>
        /// <value>The id of the combo group from which this combo member was ordered.</value>
        [DataMember(Name = "comboGroupId")]
        public string ComboGroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineCombo {\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ComboGroupId: ").Append(ComboGroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderLineCombo)obj);
        }

        /// <summary>
        /// Returns true if OrderLineCombo instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLineCombo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineCombo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) &&
                (
                    ComboGroupId == other.ComboGroupId ||
                    ComboGroupId != null &&
                    ComboGroupId.Equals(other.ComboGroupId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                if (ComboGroupId != null)
                    hashCode = hashCode * 59 + ComboGroupId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(OrderLineCombo left, OrderLineCombo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderLineCombo left, OrderLineCombo right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
