/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// Defines the input parameters for reading media via the NFC hardware reader. Supported media types depend on the actual device but typically these are NFC compatible tags or order cards base on the ISO 14443 A+b and similar standards. IMORTANT: At the moment only reading the UID of the tags are supported
    /// </summary>
    [DataContract]
    public partial class BarcodeInput : IEquatable<BarcodeInput>
    {
        /// <summary>
        /// Gets or Sets IlluminationMode
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BarcodeIlluminationMode
        {

            /// <summary>
            /// Enum OffEnum for off
            /// </summary>
            [EnumMember(Value = "off")]
            OffEnum = 1,

            /// <summary>
            /// Enum AimerEnum for aimer
            /// </summary>
            [EnumMember(Value = "aimer")]
            AimerEnum = 2,

            /// <summary>
            /// Enum IlluminationEnum for illumination
            /// </summary>
            [EnumMember(Value = "illumination")]
            IlluminationEnum = 3,

            /// <summary>
            /// Enum AimerAndIlluminationAlternatingEnum for aimerAndIlluminationAlternating
            /// </summary>
            [EnumMember(Value = "aimerAndIlluminationAlternating")]
            AimerAndIlluminationAlternatingEnum = 4,

            /// <summary>
            /// Enum AimerAndIlluminationEnum for aimerAndIllumination
            /// </summary>
            [EnumMember(Value = "aimerAndIllumination")]
            AimerAndIlluminationEnum = 5
        }

        /// <summary>
        /// Gets or Sets IlluminationMode
        /// </summary>
        [Required]
        [DataMember(Name = "illuminationMode")]
        public BarcodeIlluminationMode? IlluminationMode { get; set; }

        /// <summary>
        /// Possible values are (take care to use identical casing):   AustralianPost,   AztecCode,   BritishPost,   CanadianPost,   ChinaPost,   Codabar,   Codablock,   Code11,   Code128,   Code16K,   Code32,   Code39,   Code49,   Code93,   CouponCode,   DataMatrix,   EanUccComposite,   Ean13,   Ean8,   GS1_128,   Interleaved2of5,   ISBT,   JapanesePost,   KIXPost,   LabelCode4,   LabelCode5,   KoreaPost,   Matrix2of5,   MaxiCode,   MicroPDF417,   MSI,   OCR_USMoneyFont,   OCR_A,   OCR_B,   PDF417,   PlanetCode,   PlesseyCode,   PosiCode,   Postnet,   QRCode,   RSS,   Straight2of5_IATA,   Straight2of5_Industrial,   TLC39,   Telepen,   TriopticCode,   UCC_EAN128,   UPC_A,   UPC_E0,   UPC_E1
        /// </summary>
        /// <value>Possible values are (take care to use identical casing):   AustralianPost,   AztecCode,   BritishPost,   CanadianPost,   ChinaPost,   Codabar,   Codablock,   Code11,   Code128,   Code16K,   Code32,   Code39,   Code49,   Code93,   CouponCode,   DataMatrix,   EanUccComposite,   Ean13,   Ean8,   GS1_128,   Interleaved2of5,   ISBT,   JapanesePost,   KIXPost,   LabelCode4,   LabelCode5,   KoreaPost,   Matrix2of5,   MaxiCode,   MicroPDF417,   MSI,   OCR_USMoneyFont,   OCR_A,   OCR_B,   PDF417,   PlanetCode,   PlesseyCode,   PosiCode,   Postnet,   QRCode,   RSS,   Straight2of5_IATA,   Straight2of5_Industrial,   TLC39,   Telepen,   TriopticCode,   UCC_EAN128,   UPC_A,   UPC_E0,   UPC_E1</value>
        [DataMember(Name = "symbologies")]
        public List<string> Symbologies { get; set; }

        /// <summary>
        /// Defines the response data encoding format of the bar code. It must be one of \&quot;string\&quot; which is the default if not set or \&quot;base64\&quot;
        /// </summary>
        /// <value>Defines the response data encoding format of the bar code. It must be one of \&quot;string\&quot; which is the default if not set or \&quot;base64\&quot;</value>
        [DataMember(Name = "format")]
        public string Format { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeInput {\n");
            sb.Append("  IlluminationMode: ").Append(IlluminationMode).Append("\n");
            sb.Append("  Symbologies: ").Append(Symbologies).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BarcodeInput)obj);
        }

        /// <summary>
        /// Returns true if BarcodeInput instances are equal
        /// </summary>
        /// <param name="other">Instance of BarcodeInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeInput other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    IlluminationMode == other.IlluminationMode ||
                    IlluminationMode != null &&
                    IlluminationMode.Equals(other.IlluminationMode)
                ) &&
                (
                    Symbologies == other.Symbologies ||
                    Symbologies != null &&
                    Symbologies.SequenceEqual(other.Symbologies)
                ) &&
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (IlluminationMode != null)
                    hashCode = hashCode * 59 + IlluminationMode.GetHashCode();
                if (Symbologies != null)
                    hashCode = hashCode * 59 + Symbologies.GetHashCode();
                if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(BarcodeInput left, BarcodeInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BarcodeInput left, BarcodeInput right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
