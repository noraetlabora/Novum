/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderLine : IEquatable<OrderLine>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        [DataMember(Name = "articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// The unpaid quantity of this order line.
        /// </summary>
        /// <value>The unpaid quantity of this order line.</value>
        [Required]
        [DataMember(Name = "quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// The unpaid price of this order line.
        /// </summary>
        /// <value>The unpaid price of this order line.</value>
        [Required]
        [DataMember(Name = "singlePrice")]
        public int? SinglePrice { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OrderLineStatus
        {

            /// <summary>
            /// Enum UnknownEnum for unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            UnknownEnum = 1,

            /// <summary>
            /// Enum OrderedEnum for ordered
            /// </summary>
            [EnumMember(Value = "ordered")]
            OrderedEnum = 2,

            /// <summary>
            /// Enum CommittedEnum for committed
            /// </summary>
            [EnumMember(Value = "committed")]
            CommittedEnum = 3,

            /// <summary>
            /// Enum PaidEnum for paid
            /// </summary>
            [EnumMember(Value = "paid")]
            PaidEnum = 4
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name = "status")]
        public OrderLineStatus? Status { get; set; }

        /// <summary>
        /// If set defines the modifiers for this order line.
        /// </summary>
        /// <value>If set defines the modifiers for this order line.</value>
        [DataMember(Name = "modifiers")]
        public List<OrderLineModifier> Modifiers { get; set; }

        /// <summary>
        /// If set this order line is a combo member and defines to which head / comboGroup this order line belongs to.
        /// </summary>
        /// <value>If set this order line is a combo member and defines to which head / comboGroup this order line belongs to.</value>
        [DataMember(Name = "combo")]
        public Object Combo { get; set; }

        /// <summary>
        /// Only supported if coursing features is enabled (see osConfiguration for details). Optional. If set it refers to a course defined for the table this line is ordered in or the global courses list if no table specific courses are set. NOTE: If courses feature is enabled but no course ID is specified it is expected that this order line is going to be in the first course of the courses list.
        /// </summary>
        /// <value>Only supported if coursing features is enabled (see osConfiguration for details). Optional. If set it refers to a course defined for the table this line is ordered in or the global courses list if no table specific courses are set. NOTE: If courses feature is enabled but no course ID is specified it is expected that this order line is going to be in the first course of the courses list.</value>
        [DataMember(Name = "courseId")]
        public string CourseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLine {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SinglePrice: ").Append(SinglePrice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Combo: ").Append(Combo).Append("\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderLine)obj);
        }

        /// <summary>
        /// Returns true if OrderLine instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLine other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) &&
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) &&
                (
                    SinglePrice == other.SinglePrice ||
                    SinglePrice != null &&
                    SinglePrice.Equals(other.SinglePrice)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    Modifiers == other.Modifiers ||
                    Modifiers != null &&
                    Modifiers.SequenceEqual(other.Modifiers)
                ) &&
                (
                    Combo == other.Combo ||
                    Combo != null &&
                    Combo.Equals(other.Combo)
                ) &&
                (
                    CourseId == other.CourseId ||
                    CourseId != null &&
                    CourseId.Equals(other.CourseId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (SinglePrice != null)
                    hashCode = hashCode * 59 + SinglePrice.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Modifiers != null)
                    hashCode = hashCode * 59 + Modifiers.GetHashCode();
                if (Combo != null)
                    hashCode = hashCode * 59 + Combo.GetHashCode();
                if (CourseId != null)
                    hashCode = hashCode * 59 + CourseId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(OrderLine left, OrderLine right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderLine left, OrderLine right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
