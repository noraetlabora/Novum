/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentMedium : IEquatable<PaymentMedium>
    {
        /// <summary>
        /// The id to identify this medium.
        /// </summary>
        /// <value>The id to identify this medium.</value>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of this medium that will be shown to the user in the payment media selection screen.
        /// </summary>
        /// <value>The name of this medium that will be shown to the user in the payment media selection screen.</value>
        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Optional. false or not defined (&#x3D; default) when using this media the app will not allow to enter a higher payment amount as to be paid. true &#x3D; over payment is allowed
        /// </summary>
        /// <value>Optional. false or not defined (&#x3D; default) when using this media the app will not allow to enter a higher payment amount as to be paid. true &#x3D; over payment is allowed</value>
        [DataMember(Name = "allowOverPayment")]
        public bool? AllowOverPayment { get; set; }

        /// <summary>
        /// Optional. Whether or not to ask the user for an amount (default &#x3D;&#x3D; true &#x3D;&#x3D; ask for amount) If false, the normal “ask for amount” popup will not be shown when selecting the payment medium. If a requestInput method is defined the entered amount will be set in actions/pay/preAuthorize request and the final used amount will come from the response to actions/pay/preAuthorize. Otherwise the entered amount will be set in the actions/pay/orderlines or actions/pay/subtables request.
        /// </summary>
        /// <value>Optional. Whether or not to ask the user for an amount (default &#x3D;&#x3D; true &#x3D;&#x3D; ask for amount) If false, the normal “ask for amount” popup will not be shown when selecting the payment medium. If a requestInput method is defined the entered amount will be set in actions/pay/preAuthorize request and the final used amount will come from the response to actions/pay/preAuthorize. Otherwise the entered amount will be set in the actions/pay/orderlines or actions/pay/subtables request.</value>
        [DataMember(Name = "askForAmount")]
        public bool? AskForAmount { get; set; }

        /// <summary>
        /// If set the payment medium will trigger to ask for specific data from the user when it is selected in the payment media selection screen. This type of payment medium will ALWAYS trigger actions/pay/preAuthorize request!  Example: Let&#39;s say you plan to create a payment media to read an MSR card but if using the MSR fails (for example because of a bad magnetic strip) you want to enter the cards ID manually. In this case you have to create 2 different payment media types. First one for the MSR and the second one for manual input. So the client user has to decide which one to use. In case swiping the card fails they will cancel that procedure and select the manual entry medium instead.
        /// </summary>
        /// <value>If set the payment medium will trigger to ask for specific data from the user when it is selected in the payment media selection screen. This type of payment medium will ALWAYS trigger actions/pay/preAuthorize request!  Example: Let&#39;s say you plan to create a payment media to read an MSR card but if using the MSR fails (for example because of a bad magnetic strip) you want to enter the cards ID manually. In this case you have to create 2 different payment media types. First one for the MSR and the second one for manual input. So the client user has to decide which one to use. In case swiping the card fails they will cancel that procedure and select the manual entry medium instead.</value>
        [DataMember(Name = "requestInput")]
        public Object RequestInput { get; set; }

        /// <summary>
        /// Gets or Sets FullPaymentOnly
        /// </summary>
        [DataMember(Name = "fullPaymentOnly")]
        public bool? FullPaymentOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMedium {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AllowOverPayment: ").Append(AllowOverPayment).Append("\n");
            sb.Append("  AskForAmount: ").Append(AskForAmount).Append("\n");
            sb.Append("  RequestInput: ").Append(RequestInput).Append("\n");
            sb.Append("  FullPaymentOnly: ").Append(FullPaymentOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentMedium)obj);
        }

        /// <summary>
        /// Returns true if PaymentMedium instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentMedium to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMedium other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    AllowOverPayment == other.AllowOverPayment ||
                    AllowOverPayment != null &&
                    AllowOverPayment.Equals(other.AllowOverPayment)
                ) &&
                (
                    AskForAmount == other.AskForAmount ||
                    AskForAmount != null &&
                    AskForAmount.Equals(other.AskForAmount)
                ) &&
                (
                    RequestInput == other.RequestInput ||
                    RequestInput != null &&
                    RequestInput.Equals(other.RequestInput)
                ) &&
                (
                    FullPaymentOnly == other.FullPaymentOnly ||
                    FullPaymentOnly != null &&
                    FullPaymentOnly.Equals(other.FullPaymentOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (AllowOverPayment != null)
                    hashCode = hashCode * 59 + AllowOverPayment.GetHashCode();
                if (AskForAmount != null)
                    hashCode = hashCode * 59 + AskForAmount.GetHashCode();
                if (RequestInput != null)
                    hashCode = hashCode * 59 + RequestInput.GetHashCode();
                if (FullPaymentOnly != null)
                    hashCode = hashCode * 59 + FullPaymentOnly.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PaymentMedium left, PaymentMedium right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentMedium left, PaymentMedium right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
