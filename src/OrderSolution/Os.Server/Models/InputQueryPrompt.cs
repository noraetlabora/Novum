/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Os.Server.Models
{ 
    /// <summary>
    /// Defines a set of potentially used input types.  ATTENTION: From the allowed methods ONLY A SINGLE one is allowed to be set. If multiple are set an error will be thrown!
    /// </summary>
    [DataContract]
    public partial class InputQueryPrompt : IEquatable<InputQueryPrompt>
    { 
        /// <summary>
        /// A prompt message presented to the user while the input is read. Example for MSR: \&quot;Please swipe your ACME InHouse Credit Card or enter data manually!\&quot; Key is the language tag (like \&quot;en\&quot; or \&quot;de\&quot;). Value is the text in that language. If the current language is not provided in the Prompt the first entry will be used.
        /// </summary>
        /// <value>A prompt message presented to the user while the input is read. Example for MSR: \&quot;Please swipe your ACME InHouse Credit Card or enter data manually!\&quot; Key is the language tag (like \&quot;en\&quot; or \&quot;de\&quot;). Value is the text in that language. If the current language is not provided in the Prompt the first entry will be used.</value>
        [DataMember(Name="prompt")]
        public Dictionary<string, string> Prompt { get; set; }

        /// <summary>
        /// If set it will trigger a manual input. ATTENTION: ONLY A SINGLE method is allowed to be set. If multiple are set an error will be thrown!
        /// </summary>
        /// <value>If set it will trigger a manual input. ATTENTION: ONLY A SINGLE method is allowed to be set. If multiple are set an error will be thrown!</value>
        [DataMember(Name="methodManual")]
        public Object MethodManual { get; set; }

        /// <summary>
        /// If set it will trigger an magnetic stripe card reading procedure. ATTENTION: ONLY A SINGLE method is allowed to be set. If multiple are set an error will be thrown!
        /// </summary>
        /// <value>If set it will trigger an magnetic stripe card reading procedure. ATTENTION: ONLY A SINGLE method is allowed to be set. If multiple are set an error will be thrown!</value>
        [DataMember(Name="methodMSR")]
        public Object MethodMSR { get; set; }

        /// <summary>
        /// If set it will trigger an NFC tag reading procedure. NOTE: At the moment only ISO UID can be read. ATTENTION: ONLY A SINGLE method is allowed to be set. If multiple are set an error will be thrown!
        /// </summary>
        /// <value>If set it will trigger an NFC tag reading procedure. NOTE: At the moment only ISO UID can be read. ATTENTION: ONLY A SINGLE method is allowed to be set. If multiple are set an error will be thrown!</value>
        [DataMember(Name="methodNFC")]
        public Object MethodNFC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputQueryPrompt {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  MethodManual: ").Append(MethodManual).Append("\n");
            sb.Append("  MethodMSR: ").Append(MethodMSR).Append("\n");
            sb.Append("  MethodNFC: ").Append(MethodNFC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputQueryPrompt)obj);
        }

        /// <summary>
        /// Returns true if InputQueryPrompt instances are equal
        /// </summary>
        /// <param name="other">Instance of InputQueryPrompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputQueryPrompt other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Prompt == other.Prompt ||
                    Prompt != null &&
                    Prompt.SequenceEqual(other.Prompt)
                ) && 
                (
                    MethodManual == other.MethodManual ||
                    MethodManual != null &&
                    MethodManual.Equals(other.MethodManual)
                ) && 
                (
                    MethodMSR == other.MethodMSR ||
                    MethodMSR != null &&
                    MethodMSR.Equals(other.MethodMSR)
                ) && 
                (
                    MethodNFC == other.MethodNFC ||
                    MethodNFC != null &&
                    MethodNFC.Equals(other.MethodNFC)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Prompt != null)
                    hashCode = hashCode * 59 + Prompt.GetHashCode();
                    if (MethodManual != null)
                    hashCode = hashCode * 59 + MethodManual.GetHashCode();
                    if (MethodMSR != null)
                    hashCode = hashCode * 59 + MethodMSR.GetHashCode();
                    if (MethodNFC != null)
                    hashCode = hashCode * 59 + MethodNFC.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputQueryPrompt left, InputQueryPrompt right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputQueryPrompt left, InputQueryPrompt right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
