/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Os.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GatewayInfo : IEquatable<GatewayInfo>
    { 
        /// <summary>
        /// The gateways port at which we can query status via http. For OsServer the default configuration in the configuration file is 12344. If omitted the gatway does not support status queries.
        /// </summary>
        /// <value>The gateways port at which we can query status via http. For OsServer the default configuration in the configuration file is 12344. If omitted the gatway does not support status queries.</value>
        [DataMember(Name="httpApiPort")]
        public int? HttpApiPort { get; set; }

        /// <summary>
        /// The gatways name. In case of OsServer this name is defined in the servers configuration file.
        /// </summary>
        /// <value>The gatways name. In case of OsServer this name is defined in the servers configuration file.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The gatways ID. In case of an OsServer this ID is automatically generated on first start or set via the configuration file.
        /// </summary>
        /// <value>The gatways ID. In case of an OsServer this ID is automatically generated on first start or set via the configuration file.</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The session ID of the gatway. It will change whenever the gateway restarts.
        /// </summary>
        /// <value>The session ID of the gatway. It will change whenever the gateway restarts.</value>
        [DataMember(Name="gatewaySessionId")]
        public string GatewaySessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayInfo {\n");
            sb.Append("  HttpApiPort: ").Append(HttpApiPort).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GatewaySessionId: ").Append(GatewaySessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GatewayInfo)obj);
        }

        /// <summary>
        /// Returns true if GatewayInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of GatewayInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HttpApiPort == other.HttpApiPort ||
                    HttpApiPort != null &&
                    HttpApiPort.Equals(other.HttpApiPort)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    GatewaySessionId == other.GatewaySessionId ||
                    GatewaySessionId != null &&
                    GatewaySessionId.Equals(other.GatewaySessionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HttpApiPort != null)
                    hashCode = hashCode * 59 + HttpApiPort.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (GatewaySessionId != null)
                    hashCode = hashCode * 59 + GatewaySessionId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GatewayInfo left, GatewayInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GatewayInfo left, GatewayInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
