/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Novum.Data.Models.Os
{
    /// <summary>
    /// Provides site specific data on successful initialization.
    /// </summary>
    [DataContract]
    public partial class POSInfo : IEquatable<POSInfo>
    {
        /// <summary>
        /// The name of the restaurant we are working with.
        /// </summary>
        /// <value>The name of the restaurant we are working with.</value>
        [DataMember(Name = "restaurantName")]
        public string RestaurantName { get; set; }

        /// <summary>
        /// The current UTC time stamp (in seconds since epoch time). Used for synchronization between clients and the server.
        /// </summary>
        /// <value>The current UTC time stamp (in seconds since epoch time). Used for synchronization between clients and the server.</value>
        // [Required]
        [DataMember(Name = "utcTime")]
        public int? UtcTime { get; set; }

        /// <summary>
        /// If provided this name will be shown in the connection / login screen instead of the device name configured in the device (done via SC2). If not provided the original name as provided in the request / ClientInfo is shown.
        /// </summary>
        /// <value>If provided this name will be shown in the connection / login screen instead of the device name configured in the device (done via SC2). If not provided the original name as provided in the request / ClientInfo is shown.</value>
        [DataMember(Name = "clientName")]
        public string ClientName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class POSInfo {\n");
            sb.Append("  RestaurantName: ").Append(RestaurantName).Append("\n");
            sb.Append("  UtcTime: ").Append(UtcTime).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((POSInfo)obj);
        }

        /// <summary>
        /// Returns true if POSInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of POSInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(POSInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    RestaurantName == other.RestaurantName ||
                    RestaurantName != null &&
                    RestaurantName.Equals(other.RestaurantName)
                ) &&
                (
                    UtcTime == other.UtcTime ||
                    UtcTime != null &&
                    UtcTime.Equals(other.UtcTime)
                ) &&
                (
                    ClientName == other.ClientName ||
                    ClientName != null &&
                    ClientName.Equals(other.ClientName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (RestaurantName != null)
                    hashCode = hashCode * 59 + RestaurantName.GetHashCode();
                if (UtcTime != null)
                    hashCode = hashCode * 59 + UtcTime.GetHashCode();
                if (ClientName != null)
                    hashCode = hashCode * 59 + ClientName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(POSInfo left, POSInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(POSInfo left, POSInfo right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
