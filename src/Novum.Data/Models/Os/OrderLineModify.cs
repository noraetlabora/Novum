/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Novum.Data.Models.Os
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderLineModify : IEquatable<OrderLineModify>
    { 
        /// <summary>
        /// The quantity for this order line. When adding a new order line this value must be set.
        /// </summary>
        /// <value>The quantity for this order line. When adding a new order line this value must be set.</value>
        [DataMember(Name="quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Defines a manual price for this order line. NOTE: You must not provide this parameter if you want the price to be calculated by the POS.
        /// </summary>
        /// <value>Defines a manual price for this order line. NOTE: You must not provide this parameter if you want the price to be calculated by the POS.</value>
        [DataMember(Name="enteredPrice")]
        public int? EnteredPrice { get; set; }

        /// <summary>
        /// The modifiers for this orderline.
        /// </summary>
        /// <value>The modifiers for this orderline.</value>
        [DataMember(Name="modifiers")]
        public List<OrderLineModifier2> Modifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineModify {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  EnteredPrice: ").Append(EnteredPrice).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderLineModify)obj);
        }

        /// <summary>
        /// Returns true if OrderLineModify instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLineModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineModify other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    EnteredPrice == other.EnteredPrice ||
                    EnteredPrice != null &&
                    EnteredPrice.Equals(other.EnteredPrice)
                ) && 
                (
                    Modifiers == other.Modifiers ||
                    Modifiers != null &&
                    Modifiers.SequenceEqual(other.Modifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (EnteredPrice != null)
                    hashCode = hashCode * 59 + EnteredPrice.GetHashCode();
                    if (Modifiers != null)
                    hashCode = hashCode * 59 + Modifiers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderLineModify left, OrderLineModify right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderLineModify left, OrderLineModify right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
