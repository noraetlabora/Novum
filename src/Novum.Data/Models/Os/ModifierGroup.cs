/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Novum.Data.Models.Os
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModifierGroup : IEquatable<ModifierGroup>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Question
        /// </summary>
        [DataMember(Name = "question")]
        public string Question { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ModifierType
        {

            /// <summary>
            /// Enum PickOneEnum for pickOne
            /// </summary>
            [EnumMember(Value = "pickOne")]
            PickOneEnum = 1,

            /// <summary>
            /// Enum PickMultipleEnum for pickMultiple
            /// </summary>
            [EnumMember(Value = "pickMultiple")]
            PickMultipleEnum = 2,

            /// <summary>
            /// Enum PickNumericEnum for pickNumeric
            /// </summary>
            [EnumMember(Value = "pickNumeric")]
            PickNumericEnum = 3,

            /// <summary>
            /// Enum TextInputEnum for textInput
            /// </summary>
            [EnumMember(Value = "textInput")]
            TextInputEnum = 4,

            /// <summary>
            /// Enum FaxInputEnum for faxInput
            /// </summary>
            [EnumMember(Value = "faxInput")]
            FaxInputEnum = 5
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        // [Required]
        [DataMember(Name = "type")]
        public ModifierType? Type { get; set; }

        /// <summary>
        /// Gets or Sets MinChoices
        /// </summary>
        [DataMember(Name = "minChoices")]
        public int? MinChoices { get; set; }

        /// <summary>
        /// Gets or Sets MaxChoices
        /// </summary>
        [DataMember(Name = "maxChoices")]
        public int? MaxChoices { get; set; }

        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [DataMember(Name = "choices")]
        public List<ModifierChoice> Choices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifierGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MinChoices: ").Append(MinChoices).Append("\n");
            sb.Append("  MaxChoices: ").Append(MaxChoices).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModifierGroup)obj);
        }

        /// <summary>
        /// Returns true if ModifierGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of ModifierGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifierGroup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Question == other.Question ||
                    Question != null &&
                    Question.Equals(other.Question)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    MinChoices == other.MinChoices ||
                    MinChoices != null &&
                    MinChoices.Equals(other.MinChoices)
                ) &&
                (
                    MaxChoices == other.MaxChoices ||
                    MaxChoices != null &&
                    MaxChoices.Equals(other.MaxChoices)
                ) &&
                (
                    Choices == other.Choices ||
                    Choices != null &&
                    Choices.SequenceEqual(other.Choices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Question != null)
                    hashCode = hashCode * 59 + Question.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (MinChoices != null)
                    hashCode = hashCode * 59 + MinChoices.GetHashCode();
                if (MaxChoices != null)
                    hashCode = hashCode * 59 + MaxChoices.GetHashCode();
                if (Choices != null)
                    hashCode = hashCode * 59 + Choices.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ModifierGroup left, ModifierGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModifierGroup left, ModifierGroup right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
