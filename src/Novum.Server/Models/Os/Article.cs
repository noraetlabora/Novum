/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Novum.Server.Models.Os
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Article : IEquatable<Article>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptName
        /// </summary>
        [DataMember(Name = "receiptName")]
        public string ReceiptName { get; set; }

        /// <summary>
        /// Gets or Sets Plu
        /// </summary>
        [DataMember(Name = "plu")]
        public string Plu { get; set; }

        /// <summary>
        /// Defines if the Article force price entry when ordered. 0 &#x3D; not forced; 1 &#x3D; price entry forced
        /// </summary>
        /// <value>Defines if the Article force price entry when ordered. 0 &#x3D; not forced; 1 &#x3D; price entry forced</value>
        [Required]
        [DataMember(Name = "mustEnterPrice")]
        public int? MustEnterPrice { get; set; }

        /// <summary>
        /// If set to true AND modifier groups are assigned it forces the modifier screen to be shown right after the article was selected for ordering. (replaces the .IsMandatory from previous versions)
        /// </summary>
        /// <value>If set to true AND modifier groups are assigned it forces the modifier screen to be shown right after the article was selected for ordering. (replaces the .IsMandatory from previous versions)</value>
        [DataMember(Name = "forceShowModifiers")]
        public bool? ForceShowModifiers { get; set; }

        /// <summary>
        /// Gets or Sets ModifierGroups
        /// </summary>
        [DataMember(Name = "modifierGroups")]
        public List<ArticleModifierGroup> ModifierGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReceiptName: ").Append(ReceiptName).Append("\n");
            sb.Append("  Plu: ").Append(Plu).Append("\n");
            sb.Append("  MustEnterPrice: ").Append(MustEnterPrice).Append("\n");
            sb.Append("  ForceShowModifiers: ").Append(ForceShowModifiers).Append("\n");
            sb.Append("  ModifierGroups: ").Append(ModifierGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Article)obj);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="other">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    ReceiptName == other.ReceiptName ||
                    ReceiptName != null &&
                    ReceiptName.Equals(other.ReceiptName)
                ) &&
                (
                    Plu == other.Plu ||
                    Plu != null &&
                    Plu.Equals(other.Plu)
                ) &&
                (
                    MustEnterPrice == other.MustEnterPrice ||
                    MustEnterPrice != null &&
                    MustEnterPrice.Equals(other.MustEnterPrice)
                ) &&
                (
                    ForceShowModifiers == other.ForceShowModifiers ||
                    ForceShowModifiers != null &&
                    ForceShowModifiers.Equals(other.ForceShowModifiers)
                ) &&
                (
                    ModifierGroups == other.ModifierGroups ||
                    ModifierGroups != null &&
                    ModifierGroups.SequenceEqual(other.ModifierGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (ReceiptName != null)
                    hashCode = hashCode * 59 + ReceiptName.GetHashCode();
                if (Plu != null)
                    hashCode = hashCode * 59 + Plu.GetHashCode();
                if (MustEnterPrice != null)
                    hashCode = hashCode * 59 + MustEnterPrice.GetHashCode();
                if (ForceShowModifiers != null)
                    hashCode = hashCode * 59 + ForceShowModifiers.GetHashCode();
                if (ModifierGroups != null)
                    hashCode = hashCode * 59 + ModifierGroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Article left, Article right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Article left, Article right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
