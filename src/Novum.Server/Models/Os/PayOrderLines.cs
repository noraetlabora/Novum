/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Novum.Server.Models.Os
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PayOrderLines : IEquatable<PayOrderLines>
    { 
        /// <summary>
        /// The payments to be executed on the amount sum we get from all the sub tables in SubTableIds. Special Case: Empty payments / Payments omitted is used to close empty tables.
        /// </summary>
        /// <value>The payments to be executed on the amount sum we get from all the sub tables in SubTableIds. Special Case: Empty payments / Payments omitted is used to close empty tables.</value>
        [DataMember(Name="payments")]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// Identifies the printer to send the receipt print job to.  example: &#39;local://1&#39; check GET /api/v2/data/Printers to get a list of supported print targets
        /// </summary>
        /// <value>Identifies the printer to send the receipt print job to.  example: &#39;local://1&#39; check GET /api/v2/data/Printers to get a list of supported print targets</value>
        [DataMember(Name="printer")]
        public string Printer { get; set; }

        /// <summary>
        /// List of order line payments that represent the orderlines (-parts) that will be paied with this set.
        /// </summary>
        /// <value>List of order line payments that represent the orderlines (-parts) that will be paied with this set.</value>
        [DataMember(Name="paidLines")]
        public List<OrderLineQuanity> PaidLines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayOrderLines {\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Printer: ").Append(Printer).Append("\n");
            sb.Append("  PaidLines: ").Append(PaidLines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PayOrderLines)obj);
        }

        /// <summary>
        /// Returns true if PayOrderLines instances are equal
        /// </summary>
        /// <param name="other">Instance of PayOrderLines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayOrderLines other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) && 
                (
                    Printer == other.Printer ||
                    Printer != null &&
                    Printer.Equals(other.Printer)
                ) && 
                (
                    PaidLines == other.PaidLines ||
                    PaidLines != null &&
                    PaidLines.SequenceEqual(other.PaidLines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                    if (Printer != null)
                    hashCode = hashCode * 59 + Printer.GetHashCode();
                    if (PaidLines != null)
                    hashCode = hashCode * 59 + PaidLines.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PayOrderLines left, PayOrderLines right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PayOrderLines left, PayOrderLines right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
