/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Novum.Server.Models.Os
{ 
    /// <summary>
    /// Holds data about the remote client application / device that want&#39;s to communicate with the POS system.
    /// </summary>
    [DataContract]
    public partial class ClientInfo : IEquatable<ClientInfo>
    { 
        /// <summary>
        /// The version of the remote client application we are talking to.
        /// </summary>
        /// <value>The version of the remote client application we are talking to.</value>
        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// The id of the remote client we are talking to. (should consist of an application name + device serial nummber)
        /// </summary>
        /// <value>The id of the remote client we are talking to. (should consist of an application name + device serial nummber)</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The configured device name that can be configured via SC2 and is shown in our top status bar in the connect screen.
        /// </summary>
        /// <value>The configured device name that can be configured via SC2 and is shown in our top status bar in the connect screen.</value>
        [DataMember(Name="clientName")]
        public string ClientName { get; set; }

        /// <summary>
        /// Optional. A path to the printer that can be used for send print jobs to this client if it supports them. For Orderman handheld devices this path will be provided if an Orderman belt printer is paired with that device. To send print jobs you can use the \&quot;/printers\&quot; api of the OsServer instance this init request was coming from. Example (we assume the OsServer is running on local host and it&#39;s httpApi port is configured to 12344:     - You receive the path \&quot;/printers/125-49944541\&quot;     - You can query details about this printer via \&quot;GET http://localhost:12344/api/v1/printers/125-49944541\&quot;     - To send a new print job: \&quot;POST http://localhost:12344/api/v1/printers/125-49944541/jobs\&quot; which will return        with a print job id immediately (in this example 38428)     - to query the print job status: \&quot;GET http://localhost:12344/api/v1/printers/125-49944541/jobs/38428\&quot;
        /// </summary>
        /// <value>Optional. A path to the printer that can be used for send print jobs to this client if it supports them. For Orderman handheld devices this path will be provided if an Orderman belt printer is paired with that device. To send print jobs you can use the \&quot;/printers\&quot; api of the OsServer instance this init request was coming from. Example (we assume the OsServer is running on local host and it&#39;s httpApi port is configured to 12344:     - You receive the path \&quot;/printers/125-49944541\&quot;     - You can query details about this printer via \&quot;GET http://localhost:12344/api/v1/printers/125-49944541\&quot;     - To send a new print job: \&quot;POST http://localhost:12344/api/v1/printers/125-49944541/jobs\&quot; which will return        with a print job id immediately (in this example 38428)     - to query the print job status: \&quot;GET http://localhost:12344/api/v1/printers/125-49944541/jobs/38428\&quot;</value>
        [DataMember(Name="printerPath")]
        public string PrinterPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientInfo {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  PrinterPath: ").Append(PrinterPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClientInfo)obj);
        }

        /// <summary>
        /// Returns true if ClientInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ClientName == other.ClientName ||
                    ClientName != null &&
                    ClientName.Equals(other.ClientName)
                ) && 
                (
                    PrinterPath == other.PrinterPath ||
                    PrinterPath != null &&
                    PrinterPath.Equals(other.PrinterPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ClientName != null)
                    hashCode = hashCode * 59 + ClientName.GetHashCode();
                    if (PrinterPath != null)
                    hashCode = hashCode * 59 + PrinterPath.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClientInfo left, ClientInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClientInfo left, ClientInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
