/*
 * NT.Access
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Http;

namespace Nt.Access.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MediumApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mediumId">xxxyyy</param>
        /// <response code="200"></response>
        /// <response code="400"></response>
        [HttpGet]
        [Route("/api/v1/mediums/{mediumId}")]
        public virtual IActionResult MediumInformation([FromRoute][Required]string mediumId)
        {
            try
            {
                var information = new Models.Information();
                information.Currency = "EUR";
                information.DiscountType = "ABC";
                //
                var credit = new Models.Credit();
                credit.Amount = 1222;
                //
                var owner = new Models.Owner();
                owner.Name = "Norbert Rastl";
                //
                information.Credit = credit;
                information.Owner = owner;
                return new ObjectResult(information);
            }
            catch (Exception ex)
            {
                Nt.Logging.Log.Server.Error(ex, HttpContext.Request.Path + "|");
                var error = new Models.Error();
                error.Message = ex.Message;
                error.UserMessage = ex.Message;
                error.Type = ex.GetType().Name;
                //500
                return StatusCode(StatusCodes.Status500InternalServerError, error);
            }
        }

        /// <summary>
        /// Get the status of the host / POS. This will be regularly called by clients to detect status changes (like host / POS restarts)
        /// </summary>
        /// <param name="mediumId">id of the medium</param>
        /// <param name="data"></param>
        /// <response code="200"></response>
        [HttpPost]
        [Route("/api/v1/mediums/{mediumId}/payments")]
        public virtual IActionResult MediumPayment([FromRoute][Required]string mediumId, [FromBody]Models.Payment data)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the status of the host / POS. This will be regularly called by clients to detect status changes (like host / POS restarts)
        /// </summary>
        /// <param name="mediumId">xxxyyy</param>
        /// <param name="data"></param>
        /// <response code="200"></response>
        [HttpPost]
        [Route("/api/v1/mediums/{mediumId}/cancellations")]
        public virtual IActionResult MediumCancellation([FromRoute][Required]string mediumId, [FromBody]Models.Cancellation data)
        {
            throw new System.NotImplementedException();
        }
    }
}
