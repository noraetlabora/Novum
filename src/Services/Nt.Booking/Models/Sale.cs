/*
 * NT.Booking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Nt.Booking.Models
{
    /// <summary>
    /// This object contains all information of a sale
    /// </summary>
    [DataContract]
    public partial class Sale : IEquatable<Sale>
    {
        /// <summary>
        /// ID of the bill
        /// </summary>
        /// <value>ID of the bill</value>
        [DataMember(Name = "billId")]
        public string BillId { get; set; }

        /// <summary>
        /// Creation date and time of the bill
        /// </summary>
        /// <value>Creation date and time of the bill</value>
        [DataMember(Name = "timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// currency in ISO 4217 (EUR/CHF/GBP/USD/JPY/CNY/...)
        /// </summary>
        /// <value>currency in ISO 4217 (EUR/CHF/GBP/USD/JPY/CNY/...)</value>
        [DataMember(Name = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "payments")]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets Articles
        /// </summary>
        [DataMember(Name = "articles")]
        public List<Article> Articles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sale {\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            //return JsonConvert.SerializeObject(this, Formatting.Indented);
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Sale)obj);
        }

        /// <summary>
        /// Returns true if Sale instances are equal
        /// </summary>
        /// <param name="other">Instance of Sale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sale other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    BillId == other.BillId ||
                    BillId != null &&
                    BillId.Equals(other.BillId)
                ) &&
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) &&
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) &&
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) &&
                (
                    Articles == other.Articles ||
                    Articles != null &&
                    Articles.SequenceEqual(other.Articles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (BillId != null)
                    hashCode = hashCode * 59 + BillId.GetHashCode();
                if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                if (Articles != null)
                    hashCode = hashCode * 59 + Articles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Sale left, Sale right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Sale left, Sale right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
