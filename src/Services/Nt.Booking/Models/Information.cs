/*
 * NT.Access
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;

namespace Nt.Booking.Models
{
    /// <summary>
    /// This object contains all Information of the medium
    /// </summary>
    [DataContract]
    public partial class Information : IEquatable<Information>
    {
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner")]
        public Owner Owner { get; set; }

        /// <summary>
        /// Gets or Sets Debit
        /// </summary>
        [DataMember(Name = "debit")]
        public Debit Debit { get; set; }

        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [DataMember(Name = "credit")]
        public Credit Credit { get; set; }

        /// <summary>
        /// currency in ISO 4217 (EUR/CHF/GBP/USD/JPY/CNY/...)
        /// </summary>
        /// <value>currency in ISO 4217 (EUR/CHF/GBP/USD/JPY/CNY/...)</value>
        [DataMember(Name = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// type of discount
        /// </summary>
        /// <value>type of discount</value>
        [DataMember(Name = "discountType")]
        public string DiscountType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Information {\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Debit: ").Append(Debit).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            //return JsonConvert.SerializeObject(this, Formatting.Indented);
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Information)obj);
        }

        /// <summary>
        /// Returns true if Information instances are equal
        /// </summary>
        /// <param name="other">Instance of Information to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Information other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) &&
                (
                    Debit == other.Debit ||
                    Debit != null &&
                    Debit.Equals(other.Debit)
                ) &&
                (
                    Credit == other.Credit ||
                    Credit != null &&
                    Credit.Equals(other.Credit)
                ) &&
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) &&
                (
                    DiscountType == other.DiscountType ||
                    DiscountType != null &&
                    DiscountType.Equals(other.DiscountType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                if (Debit != null)
                    hashCode = hashCode * 59 + Debit.GetHashCode();
                if (Credit != null)
                    hashCode = hashCode * 59 + Credit.GetHashCode();
                if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                if (DiscountType != null)
                    hashCode = hashCode * 59 + DiscountType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Information left, Information right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Information left, Information right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
