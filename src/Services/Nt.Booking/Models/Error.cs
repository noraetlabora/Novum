/*
 * NT.Booking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;

namespace Nt.Booking.Models
{
    /// <summary>
    /// error object
    /// </summary>
    [DataContract]
    public partial class Error : IEquatable<Error>
    {
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets BookingSystem
        /// </summary>
        [DataMember(Name = "bookingSystem")]
        public string BookingSystem { get; set; }

        /// <summary>
        /// Gets or Sets BookingSystemMessage
        /// </summary>
        [DataMember(Name = "bookingSystemMessage")]
        public string BookingSystemMessage { get; set; }

        /// <summary>
        /// Gets or Sets BookingSystemCode
        /// </summary>
        [DataMember(Name = "bookingSystemCode")]
        public string BookingSystemCode { get; set; }

        /// <summary>
        /// Gets or Sets DisplayMessage
        /// </summary>
        [DataMember(Name = "DisplayMessage")]
        public string DisplayMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  BookingSystem: ").Append(BookingSystem).Append("\n");
            sb.Append("  BookingSystemMessage: ").Append(BookingSystemMessage).Append("\n");
            sb.Append("  BookingSystemCode: ").Append(BookingSystemCode).Append("\n");
            sb.Append("  DisplayMessage: ").Append(DisplayMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            //return JsonConvert.SerializeObject(this, Formatting.Indented);
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Error)obj);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="other">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    BookingSystemMessage == other.BookingSystemMessage ||
                    BookingSystemMessage != null &&
                    BookingSystemMessage.Equals(other.BookingSystemMessage)
                ) &&
                (
                    BookingSystemCode == other.BookingSystemCode ||
                    BookingSystemCode != null &&
                    BookingSystemCode.Equals(other.BookingSystemCode)
                ) &&
                (
                    DisplayMessage == other.DisplayMessage ||
                    DisplayMessage != null &&
                    DisplayMessage.Equals(other.DisplayMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (BookingSystem != null)
                    hashCode = hashCode * 59 + BookingSystem.GetHashCode();
                if (BookingSystemMessage != null)
                    hashCode = hashCode * 59 + BookingSystemMessage.GetHashCode();
                if (BookingSystemCode != null)
                    hashCode = hashCode * 59 + BookingSystemCode.GetHashCode();
                if (DisplayMessage != null)
                    hashCode = hashCode * 59 + DisplayMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Error left, Error right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Error left, Error right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
