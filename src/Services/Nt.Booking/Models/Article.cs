/*
 * NT.Booking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;

namespace Nt.Booking.Models
{
    /// <summary>
    /// This object contains all information of an article
    /// </summary>
    [DataContract]
    public partial class Article : IEquatable<Article>
    {
        /// <summary>
        /// ID of the article
        /// </summary>
        /// <value>ID of the article</value>
        [DataMember(Name = "articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// Name of the article
        /// </summary>
        /// <value>Name of the article</value>
        [DataMember(Name = "articleName")]
        public string ArticleName { get; set; }

        /// <summary>
        /// Quantity  (*100)
        /// </summary>
        /// <value>Quantity  (*100)</value>
        [DataMember(Name = "quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Unit of the quantity
        /// </summary>
        /// <value>Unit of the quantity</value>
        [DataMember(Name = "quantityUnit")]
        public string QuantityUnit { get; set; }

        /// <summary>
        /// ID of the article group
        /// </summary>
        /// <value>ID of the article group</value>
        [DataMember(Name = "articleGroupId")]
        public string ArticleGroupId { get; set; }

        /// <summary>
        /// Name of the article group
        /// </summary>
        /// <value>Name of the article group</value>
        [DataMember(Name = "articleGroupName")]
        public string ArticleGroupName { get; set; }

        /// <summary>
        /// Unit price including tax  (*100)
        /// </summary>
        /// <value>Unit price including tax  (*100)</value>
        [DataMember(Name = "unitPrice")]
        public int? UnitPrice { get; set; }

        /// <summary>
        /// Tax rate  (*100)
        /// </summary>
        /// <value>Tax rate  (*100)</value>
        [DataMember(Name = "taxRate")]
        public int? TaxRate { get; set; }

        /// <summary>
        /// discount (discount to the total amount &#x3D; unitPrice * quantity)  (*100)
        /// </summary>
        /// <value>discount (discount to the total amount &#x3D; unitPrice * quantity)  (*100)</value>
        [DataMember(Name = "discountAmount")]
        public int? DiscountAmount { get; set; }

        /// <summary>
        /// ID of the discount group
        /// </summary>
        /// <value>ID of the discount group</value>
        [DataMember(Name = "discountGroupId")]
        public string DiscountGroupId { get; set; }

        /// <summary>
        /// Name of the discount group
        /// </summary>
        /// <value>Name of the discount group</value>
        [DataMember(Name = "discountGroupName")]
        public string DiscountGroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  ArticleName: ").Append(ArticleName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityUnit: ").Append(QuantityUnit).Append("\n");
            sb.Append("  ArticleGroupId: ").Append(ArticleGroupId).Append("\n");
            sb.Append("  ArticleGroupName: ").Append(ArticleGroupName).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountGroupId: ").Append(DiscountGroupId).Append("\n");
            sb.Append("  DiscountGroupName: ").Append(DiscountGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            //return JsonConvert.SerializeObject(this, Formatting.Indented);
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Article)obj);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="other">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) &&
                (
                    ArticleName == other.ArticleName ||
                    ArticleName != null &&
                    ArticleName.Equals(other.ArticleName)
                ) &&
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) &&
                (
                    QuantityUnit == other.QuantityUnit ||
                    QuantityUnit != null &&
                    QuantityUnit.Equals(other.QuantityUnit)
                ) &&
                (
                    ArticleGroupId == other.ArticleGroupId ||
                    ArticleGroupId != null &&
                    ArticleGroupId.Equals(other.ArticleGroupId)
                ) &&
                (
                    ArticleGroupName == other.ArticleGroupName ||
                    ArticleGroupName != null &&
                    ArticleGroupName.Equals(other.ArticleGroupName)
                ) &&
                (
                    UnitPrice == other.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(other.UnitPrice)
                ) &&
                (
                    TaxRate == other.TaxRate ||
                    TaxRate != null &&
                    TaxRate.Equals(other.TaxRate)
                ) &&
                (
                    DiscountAmount == other.DiscountAmount ||
                    DiscountAmount != null &&
                    DiscountAmount.Equals(other.DiscountAmount)
                ) &&
                (
                    DiscountGroupId == other.DiscountGroupId ||
                    DiscountGroupId != null &&
                    DiscountGroupId.Equals(other.DiscountGroupId)
                ) &&
                (
                    DiscountGroupName == other.DiscountGroupName ||
                    DiscountGroupName != null &&
                    DiscountGroupName.Equals(other.DiscountGroupName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                if (ArticleName != null)
                    hashCode = hashCode * 59 + ArticleName.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (QuantityUnit != null)
                    hashCode = hashCode * 59 + QuantityUnit.GetHashCode();
                if (ArticleGroupId != null)
                    hashCode = hashCode * 59 + ArticleGroupId.GetHashCode();
                if (ArticleGroupName != null)
                    hashCode = hashCode * 59 + ArticleGroupName.GetHashCode();
                if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                if (TaxRate != null)
                    hashCode = hashCode * 59 + TaxRate.GetHashCode();
                if (DiscountAmount != null)
                    hashCode = hashCode * 59 + DiscountAmount.GetHashCode();
                if (DiscountGroupId != null)
                    hashCode = hashCode * 59 + DiscountGroupId.GetHashCode();
                if (DiscountGroupName != null)
                    hashCode = hashCode * 59 + DiscountGroupName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Article left, Article right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Article left, Article right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
