/*
 * NT.Booking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;

namespace Nt.Booking.Models
{
    /// <summary>
    /// This object contains all information of a payment
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    {
        /// <summary>
        /// ID of the payment method
        /// </summary>
        /// <value>ID of the payment method</value>
        [DataMember(Name = "paymentTypeId")]
        public string PaymentTypeId { get; set; }

        /// <summary>
        /// Name of the payment method
        /// </summary>
        /// <value>Name of the payment method</value>
        [DataMember(Name = "paymentTypeName")]
        public string PaymentTypeName { get; set; }

        /// <summary>
        /// Amount of the payment  (*100)
        /// </summary>
        /// <value>Amount of the payment  (*100)</value>
        [DataMember(Name = "amount")]
        public int? Amount { get; set; }

        /// <summary>
        /// Amount of the tip  (*100)
        /// </summary>
        /// <value>Amount of the tip  (*100)</value>
        [DataMember(Name = "tip")]
        public int? Tip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  PaymentTypeId: ").Append(PaymentTypeId).Append("\n");
            sb.Append("  PaymentTypeName: ").Append(PaymentTypeName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Tip: ").Append(Tip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            //return JsonConvert.SerializeObject(this, Formatting.Indented);
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PaymentTypeId == other.PaymentTypeId ||
                    PaymentTypeId != null &&
                    PaymentTypeId.Equals(other.PaymentTypeId)
                ) &&
                (
                    PaymentTypeName == other.PaymentTypeName ||
                    PaymentTypeName != null &&
                    PaymentTypeName.Equals(other.PaymentTypeName)
                ) &&
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) &&
                (
                    Tip == other.Tip ||
                    Tip != null &&
                    Tip.Equals(other.Tip)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PaymentTypeId != null)
                    hashCode = hashCode * 59 + PaymentTypeId.GetHashCode();
                if (PaymentTypeName != null)
                    hashCode = hashCode * 59 + PaymentTypeName.GetHashCode();
                if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                if (Tip != null)
                    hashCode = hashCode * 59 + Tip.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}