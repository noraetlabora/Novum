/*
 * NT.Booking
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Nt.Booking.Models
{
    /// <summary>
    /// This object contains all information of the payment with a medium
    /// </summary>
    [DataContract]
    public partial class PaymentRequest : IEquatable<PaymentRequest>
    {
        /// <summary>
        /// ID of the requesting system
        /// </summary>
        /// <value>ID of the requesting system</value>
        [DataMember(Name = "clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Name of the requesting system
        /// </summary>
        /// <value>Name of the requesting system</value>
        [DataMember(Name = "clientName")]
        public string ClientName { get; set; }

        /// <summary>
        /// ID of the POS operator
        /// </summary>
        /// <value>ID of the POS operator</value>
        [DataMember(Name = "waiterId")]
        public string WaiterId { get; set; }

        /// <summary>
        /// Name of the POS operator
        /// </summary>
        /// <value>Name of the POS operator</value>
        [DataMember(Name = "waiterName")]
        public string WaiterName { get; set; }

        /// <summary>
        /// ID of the POS
        /// </summary>
        /// <value>ID of the POS</value>
        [DataMember(Name = "posId")]
        public string PosId { get; set; }

        /// <summary>
        /// Name of the POS
        /// </summary>
        /// <value>Name of the POS</value>
        [DataMember(Name = "posName")]
        public string PosName { get; set; }

        /// <summary>
        /// ID of the service area
        /// </summary>
        /// <value>ID of the service area</value>
        [DataMember(Name = "serviceAreaId")]
        public string ServiceAreaId { get; set; }

        /// <summary>
        /// Name of the service area
        /// </summary>
        /// <value>Name of the service area</value>
        [DataMember(Name = "serviceAreaName")]
        public string ServiceAreaName { get; set; }

        /// <summary>
        /// ID of the table
        /// </summary>
        /// <value>ID of the table</value>
        [DataMember(Name = "tableId")]
        public string TableId { get; set; }

        /// <summary>
        /// Name of the table
        /// </summary>
        /// <value>Name of the table</value>
        [DataMember(Name = "tableName")]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name = "sales")]
        public List<Sale> Sales { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  WaiterId: ").Append(WaiterId).Append("\n");
            sb.Append("  WaiterName: ").Append(WaiterName).Append("\n");
            sb.Append("  PosId: ").Append(PosId).Append("\n");
            sb.Append("  PosName: ").Append(PosName).Append("\n");
            sb.Append("  ServiceAreaId: ").Append(ServiceAreaId).Append("\n");
            sb.Append("  ServiceAreaName: ").Append(ServiceAreaName).Append("\n");
            sb.Append("  TableId: ").Append(TableId).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            //return JsonConvert.SerializeObject(this, Formatting.Indented);
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ClientId == other.ClientId ||
                    ClientId != null &&
                    ClientId.Equals(other.ClientId)
                ) &&
                (
                    ClientName == other.ClientName ||
                    ClientName != null &&
                    ClientName.Equals(other.ClientName)
                ) &&
                (
                    WaiterId == other.WaiterId ||
                    WaiterId != null &&
                    WaiterId.Equals(other.WaiterId)
                ) &&
                (
                    WaiterName == other.WaiterName ||
                    WaiterName != null &&
                    WaiterName.Equals(other.WaiterName)
                ) &&
                (
                    PosId == other.PosId ||
                    PosId != null &&
                    PosId.Equals(other.PosId)
                ) &&
                (
                    PosName == other.PosName ||
                    PosName != null &&
                    PosName.Equals(other.PosName)
                ) &&
                (
                    ServiceAreaId == other.ServiceAreaId ||
                    ServiceAreaId != null &&
                    ServiceAreaId.Equals(other.ServiceAreaId)
                ) &&
                (
                    ServiceAreaName == other.ServiceAreaName ||
                    ServiceAreaName != null &&
                    ServiceAreaName.Equals(other.ServiceAreaName)
                ) &&
                (
                    TableId == other.TableId ||
                    TableId != null &&
                    TableId.Equals(other.TableId)
                ) &&
                (
                    TableName == other.TableName ||
                    TableName != null &&
                    TableName.Equals(other.TableName)
                ) &&
                (
                    Sales == other.Sales ||
                    Sales != null &&
                    Sales.SequenceEqual(other.Sales)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ClientId != null)
                    hashCode = hashCode * 59 + ClientId.GetHashCode();
                if (ClientName != null)
                    hashCode = hashCode * 59 + ClientName.GetHashCode();
                if (WaiterId != null)
                    hashCode = hashCode * 59 + WaiterId.GetHashCode();
                if (WaiterName != null)
                    hashCode = hashCode * 59 + WaiterName.GetHashCode();
                if (PosId != null)
                    hashCode = hashCode * 59 + PosId.GetHashCode();
                if (PosName != null)
                    hashCode = hashCode * 59 + PosName.GetHashCode();
                if (ServiceAreaId != null)
                    hashCode = hashCode * 59 + ServiceAreaId.GetHashCode();
                if (ServiceAreaName != null)
                    hashCode = hashCode * 59 + ServiceAreaName.GetHashCode();
                if (TableId != null)
                    hashCode = hashCode * 59 + TableId.GetHashCode();
                if (TableName != null)
                    hashCode = hashCode * 59 + TableName.GetHashCode();
                if (Sales != null)
                    hashCode = hashCode * 59 + Sales.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PaymentRequest left, PaymentRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentRequest left, PaymentRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
