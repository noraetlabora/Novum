/*
 * NT.Fiscal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;

namespace NT.Fiscal.Models
{ 
    /// <summary>
    /// This object contains all information of the receipt
    /// </summary>
    [DataContract]
    public partial class SendReceiptRequest : IEquatable<SendReceiptRequest>
    { 
        /// <summary>
        /// software version of the requesting system
        /// </summary>
        /// <value>software version of the requesting system</value>
        [DataMember(Name="applicationVersion")]
        public string ApplicationVersion { get; set; }

        /// <summary>
        /// date and time of the receipt
        /// </summary>
        /// <value>date and time of the receipt</value>
        [DataMember(Name="bookingTimeStamp")]
        public DateTime? BookingTimeStamp { get; set; }

        /// <summary>
        /// ID of the POS operator
        /// </summary>
        /// <value>ID of the POS operator</value>
        [DataMember(Name="waiterId")]
        public string WaiterId { get; set; }

        /// <summary>
        /// Name of the POS operator
        /// </summary>
        /// <value>Name of the POS operator</value>
        [DataMember(Name="waiterName")]
        public string WaiterName { get; set; }

        /// <summary>
        /// ID of the POS
        /// </summary>
        /// <value>ID of the POS</value>
        [DataMember(Name="posId")]
        public string PosId { get; set; }

        /// <summary>
        /// Name of the POS
        /// </summary>
        /// <value>Name of the POS</value>
        [DataMember(Name="posName")]
        public string PosName { get; set; }

        /// <summary>
        /// ID of the service area
        /// </summary>
        /// <value>ID of the service area</value>
        [DataMember(Name="serviceAreaId")]
        public string ServiceAreaId { get; set; }

        /// <summary>
        /// Name of the service area
        /// </summary>
        /// <value>Name of the service area</value>
        [DataMember(Name="serviceAreaName")]
        public string ServiceAreaName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendReceiptRequest {\n");
            sb.Append("  ApplicationVersion: ").Append(ApplicationVersion).Append("\n");
            sb.Append("  BookingTimeStamp: ").Append(BookingTimeStamp).Append("\n");
            sb.Append("  WaiterId: ").Append(WaiterId).Append("\n");
            sb.Append("  WaiterName: ").Append(WaiterName).Append("\n");
            sb.Append("  PosId: ").Append(PosId).Append("\n");
            sb.Append("  PosName: ").Append(PosName).Append("\n");
            sb.Append("  ServiceAreaId: ").Append(ServiceAreaId).Append("\n");
            sb.Append("  ServiceAreaName: ").Append(ServiceAreaName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return System.Text.Json.JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SendReceiptRequest)obj);
        }

        /// <summary>
        /// Returns true if SendReceiptRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SendReceiptRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendReceiptRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplicationVersion == other.ApplicationVersion ||
                    ApplicationVersion != null &&
                    ApplicationVersion.Equals(other.ApplicationVersion)
                ) && 
                (
                    BookingTimeStamp == other.BookingTimeStamp ||
                    BookingTimeStamp != null &&
                    BookingTimeStamp.Equals(other.BookingTimeStamp)
                ) && 
                (
                    WaiterId == other.WaiterId ||
                    WaiterId != null &&
                    WaiterId.Equals(other.WaiterId)
                ) && 
                (
                    WaiterName == other.WaiterName ||
                    WaiterName != null &&
                    WaiterName.Equals(other.WaiterName)
                ) && 
                (
                    PosId == other.PosId ||
                    PosId != null &&
                    PosId.Equals(other.PosId)
                ) && 
                (
                    PosName == other.PosName ||
                    PosName != null &&
                    PosName.Equals(other.PosName)
                ) && 
                (
                    ServiceAreaId == other.ServiceAreaId ||
                    ServiceAreaId != null &&
                    ServiceAreaId.Equals(other.ServiceAreaId)
                ) && 
                (
                    ServiceAreaName == other.ServiceAreaName ||
                    ServiceAreaName != null &&
                    ServiceAreaName.Equals(other.ServiceAreaName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplicationVersion != null)
                    hashCode = hashCode * 59 + ApplicationVersion.GetHashCode();
                    if (BookingTimeStamp != null)
                    hashCode = hashCode * 59 + BookingTimeStamp.GetHashCode();
                    if (WaiterId != null)
                    hashCode = hashCode * 59 + WaiterId.GetHashCode();
                    if (WaiterName != null)
                    hashCode = hashCode * 59 + WaiterName.GetHashCode();
                    if (PosId != null)
                    hashCode = hashCode * 59 + PosId.GetHashCode();
                    if (PosName != null)
                    hashCode = hashCode * 59 + PosName.GetHashCode();
                    if (ServiceAreaId != null)
                    hashCode = hashCode * 59 + ServiceAreaId.GetHashCode();
                    if (ServiceAreaName != null)
                    hashCode = hashCode * 59 + ServiceAreaName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SendReceiptRequest left, SendReceiptRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendReceiptRequest left, SendReceiptRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
