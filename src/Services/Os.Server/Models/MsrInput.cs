/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// Defines which tracks of the magnetic stripe card to read.
    /// </summary>
    [DataContract]
    public partial class MsrInput : IEquatable<MsrInput>
    {
        /// <summary>
        /// Defines the track numbers that will be read and returned. All tracks must be read successfully so that any data is returned. Allowed Values: 1,2,3 Example for reading all 3 tracks: [ 1,2,3 ]
        /// </summary>
        /// <value>Defines the track numbers that will be read and returned. All tracks must be read successfully so that any data is returned. Allowed Values: 1,2,3 Example for reading all 3 tracks: [ 1,2,3 ]</value>
        [DataMember(Name = "enabledTracks")]
        public List<int?> EnabledTracks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MsrInput {\n");
            sb.Append("  EnabledTracks: ").Append(EnabledTracks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MsrInput)obj);
        }

        /// <summary>
        /// Returns true if MsrInput instances are equal
        /// </summary>
        /// <param name="other">Instance of MsrInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MsrInput other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    EnabledTracks == other.EnabledTracks ||
                    EnabledTracks != null &&
                    EnabledTracks.SequenceEqual(other.EnabledTracks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (EnabledTracks != null)
                    hashCode = hashCode * 59 + EnabledTracks.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MsrInput left, MsrInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MsrInput left, MsrInput right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
