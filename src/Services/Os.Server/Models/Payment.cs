/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// Describes a single payment done. A receipt can be paid with several different payments.
    /// </summary>
    [DataContract]
    public partial class Payment : IEquatable<Payment>
    {
        /// <summary>
        /// The amount that will get paid.
        /// </summary>
        /// <value>The amount that will get paid.</value>
        [Required]
        [DataMember(Name = "amountPaid")]
        public int? AmountPaid { get; set; }

        /// <summary>
        /// The payment media type (id) used for this amount. (example: Cash, Credit Card, ...)
        /// </summary>
        /// <value>The payment media type (id) used for this amount. (example: Cash, Credit Card, ...)</value>
        [DataMember(Name = "paymentMediumId")]
        public string PaymentMediumId { get; set; }

        /// <summary>
        /// Some payment media types require a pre-authorization. The pre-authorization process returns an authorization code that will be provided here to refer to the detailed authorized payment amount + the medium data.
        /// </summary>
        /// <value>Some payment media types require a pre-authorization. The pre-authorization process returns an authorization code that will be provided here to refer to the detailed authorized payment amount + the medium data.</value>
        [DataMember(Name = "authCode")]
        public string AuthCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  PaymentMediumId: ").Append(PaymentMediumId).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Payment)obj);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    AmountPaid == other.AmountPaid ||
                    AmountPaid != null &&
                    AmountPaid.Equals(other.AmountPaid)
                ) &&
                (
                    PaymentMediumId == other.PaymentMediumId ||
                    PaymentMediumId != null &&
                    PaymentMediumId.Equals(other.PaymentMediumId)
                ) &&
                (
                    AuthCode == other.AuthCode ||
                    AuthCode != null &&
                    AuthCode.Equals(other.AuthCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AmountPaid != null)
                    hashCode = hashCode * 59 + AmountPaid.GetHashCode();
                if (PaymentMediumId != null)
                    hashCode = hashCode * 59 + PaymentMediumId.GetHashCode();
                if (AuthCode != null)
                    hashCode = hashCode * 59 + AuthCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Payment left, Payment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Payment left, Payment right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
