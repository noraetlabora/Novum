/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// Defines actions to be taken as a result of pressing the action button.
    /// </summary>
    [DataContract]
    public partial class ActionButtonResponseData : IEquatable<ActionButtonResponseData>
    {
        /// <summary>
        /// IMPORTANT: For ActionButton responses ONLY the OK dialog is supported.
        /// </summary>
        /// <value>IMPORTANT: For ActionButton responses ONLY the OK dialog is supported.</value>
        [DataMember(Name = "dialog")]
        public Object Dialog { get; set; }

        /// <summary>
        /// Gets or Sets OnSuccess
        /// </summary>
        [DataMember(Name = "onSuccess")]
        public ActionButtonOnSuccess OnSuccess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionButtonResponseData {\n");
            sb.Append("  Dialog: ").Append(Dialog).Append("\n");
            sb.Append("  OnSuccess: ").Append(OnSuccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActionButtonResponseData)obj);
        }

        /// <summary>
        /// Returns true if ActionButtonResponseData instances are equal
        /// </summary>
        /// <param name="other">Instance of ActionButtonResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionButtonResponseData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Dialog == other.Dialog ||
                    Dialog != null &&
                    Dialog.Equals(other.Dialog)
                ) &&
                (
                    OnSuccess == other.OnSuccess ||
                    OnSuccess != null &&
                    OnSuccess.Equals(other.OnSuccess)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Dialog != null)
                    hashCode = hashCode * 59 + Dialog.GetHashCode();
                if (OnSuccess != null)
                    hashCode = hashCode * 59 + OnSuccess.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ActionButtonResponseData left, ActionButtonResponseData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActionButtonResponseData left, ActionButtonResponseData right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
