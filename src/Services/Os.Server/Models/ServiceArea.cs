/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceArea : IEquatable<ServiceArea>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Disables (default) or enables the option to querying for number of covers in tables. If not disabled the user is asked to enter the number of covers (which usually is the same as number of guests) when opening a table in the table selection screen and also a configured tool bar button will be enabled. If false or not defined the user is not asked and in case a tool bar button is configured for modifying number of covers this button is disabled.
        /// </summary>
        /// <value>Disables (default) or enables the option to querying for number of covers in tables. If not disabled the user is asked to enter the number of covers (which usually is the same as number of guests) when opening a table in the table selection screen and also a configured tool bar button will be enabled. If false or not defined the user is not asked and in case a tool bar button is configured for modifying number of covers this button is disabled.</value>
        [Required]
        [DataMember(Name = "numberOfCovers")]
        public Object NumberOfCovers { get; set; }

        /// <summary>
        /// Disables (default) or enables the option to querying for guest type in tables. If not disabled the user is asked to enter the guest type when opening a table in the table selection screen and also a configured tool bar button will be enabled (note: this is the same toolbar button as for number of covers). If disabled or not defined the user is not asked and in case a tool bar button is configured for modifying number of covers this button is disabled.
        /// </summary>
        /// <value>Disables (default) or enables the option to querying for guest type in tables. If not disabled the user is asked to enter the guest type when opening a table in the table selection screen and also a configured tool bar button will be enabled (note: this is the same toolbar button as for number of covers). If disabled or not defined the user is not asked and in case a tool bar button is configured for modifying number of covers this button is disabled.</value>
        [Required]
        [DataMember(Name = "guestType")]
        public Object GuestType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceArea {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfCovers: ").Append(NumberOfCovers).Append("\n");
            sb.Append("  GuestType: ").Append(GuestType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceArea)obj);
        }

        /// <summary>
        /// Returns true if ServiceArea instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceArea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceArea other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    NumberOfCovers == other.NumberOfCovers ||
                    NumberOfCovers != null &&
                    NumberOfCovers.Equals(other.NumberOfCovers)
                ) &&
                (
                    GuestType == other.GuestType ||
                    GuestType != null &&
                    GuestType.Equals(other.GuestType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (NumberOfCovers != null)
                    hashCode = hashCode * 59 + NumberOfCovers.GetHashCode();
                if (GuestType != null)
                    hashCode = hashCode * 59 + GuestType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ServiceArea left, ServiceArea right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceArea left, ServiceArea right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
