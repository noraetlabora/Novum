/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PreAuthMedium : IEquatable<PreAuthMedium>
    {
        /// <summary>
        /// This is the code to be used in the later pay action to identify this authorized payment medium and it&#39;s amount.
        /// </summary>
        /// <value>This is the code to be used in the later pay action to identify this authorized payment medium and it&#39;s amount.</value>
        [DataMember(Name = "authCode")]
        public string AuthCode { get; set; }

        /// <summary>
        /// The amount that was authorized. This can be the same as the requested amount but can also be lower. Examples when this might be lower then the requested amount:     - if the lines include articles that are not allowed for this payment medium     - and others
        /// </summary>
        /// <value>The amount that was authorized. This can be the same as the requested amount but can also be lower. Examples when this might be lower then the requested amount:     - if the lines include articles that are not allowed for this payment medium     - and others</value>
        [Required]
        [DataMember(Name = "authAmount")]
        public int? AuthAmount { get; set; }

        /// <summary>
        /// The tip amount that was authorized. Examples when this might be lower then the requested amount:     - if the medium does not allow to pay the tip with it     - and others
        /// </summary>
        /// <value>The tip amount that was authorized. Examples when this might be lower then the requested amount:     - if the medium does not allow to pay the tip with it     - and others</value>
        [Required]
        [DataMember(Name = "authTip")]
        public int? AuthTip { get; set; }

        /// <summary>
        /// If set the name that this payment will have on the receipt / display. Can be used for adding information about the finally used payment medium like which type of credit card was used or how many loyalty points were used for this payment of other things.
        /// </summary>
        /// <value>If set the name that this payment will have on the receipt / display. Can be used for adding information about the finally used payment medium like which type of credit card was used or how many loyalty points were used for this payment of other things.</value>
        [DataMember(Name = "receiptName")]
        public string ReceiptName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreAuthMedium {\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  AuthAmount: ").Append(AuthAmount).Append("\n");
            sb.Append("  AuthTip: ").Append(AuthTip).Append("\n");
            sb.Append("  ReceiptName: ").Append(ReceiptName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PreAuthMedium)obj);
        }

        /// <summary>
        /// Returns true if PreAuthMedium instances are equal
        /// </summary>
        /// <param name="other">Instance of PreAuthMedium to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreAuthMedium other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    AuthCode == other.AuthCode ||
                    AuthCode != null &&
                    AuthCode.Equals(other.AuthCode)
                ) &&
                (
                    AuthAmount == other.AuthAmount ||
                    AuthAmount != null &&
                    AuthAmount.Equals(other.AuthAmount)
                ) &&
                (
                    AuthTip == other.AuthTip ||
                    AuthTip != null &&
                    AuthTip.Equals(other.AuthTip)
                ) &&
                (
                    ReceiptName == other.ReceiptName ||
                    ReceiptName != null &&
                    ReceiptName.Equals(other.ReceiptName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AuthCode != null)
                    hashCode = hashCode * 59 + AuthCode.GetHashCode();
                if (AuthAmount != null)
                    hashCode = hashCode * 59 + AuthAmount.GetHashCode();
                if (AuthTip != null)
                    hashCode = hashCode * 59 + AuthTip.GetHashCode();
                if (ReceiptName != null)
                    hashCode = hashCode * 59 + ReceiptName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PreAuthMedium left, PreAuthMedium right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PreAuthMedium left, PreAuthMedium right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
