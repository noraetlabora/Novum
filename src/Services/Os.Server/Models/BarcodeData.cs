/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// Holds the data of a read bar code
    /// </summary>
    [DataContract]
    public partial class BarcodeData : IEquatable<BarcodeData>
    {
        /// <summary>
        /// The symbology of the read bar code. See Symbologies for to be expected options.
        /// </summary>
        /// <value>The symbology of the read bar code. See Symbologies for to be expected options.</value>
        [DataMember(Name = "symbology")]
        public string Symbology { get; set; }

        /// <summary>
        /// The bar code data encoded in the format as defined. See Format.
        /// </summary>
        /// <value>The bar code data encoded in the format as defined. See Format.</value>
        [DataMember(Name = "data")]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeData {\n");
            sb.Append("  Symbology: ").Append(Symbology).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BarcodeData)obj);
        }

        /// <summary>
        /// Returns true if BarcodeData instances are equal
        /// </summary>
        /// <param name="other">Instance of BarcodeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Symbology == other.Symbology ||
                    Symbology != null &&
                    Symbology.Equals(other.Symbology)
                ) &&
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Symbology != null)
                    hashCode = hashCode * 59 + Symbology.GetHashCode();
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(BarcodeData left, BarcodeData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BarcodeData left, BarcodeData right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
