/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddCourseData : IEquatable<AddCourseData>
    {
        /// <summary>
        /// Optional. If set the new course is added/inserted after the course with the id provided here in the tables course list. If not set the new course is added at the end of the tables course list. Note: If the table does not yet have a table course list the global course list must be set in the table and the new table is added/inserted into this new list.
        /// </summary>
        /// <value>Optional. If set the new course is added/inserted after the course with the id provided here in the tables course list. If not set the new course is added at the end of the tables course list. Note: If the table does not yet have a table course list the global course list must be set in the table and the new table is added/inserted into this new list.</value>
        [DataMember(Name = "addAfterId")]
        public string AddAfterId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddCourseData {\n");
            sb.Append("  AddAfterId: ").Append(AddAfterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddCourseData)obj);
        }

        /// <summary>
        /// Returns true if AddCourseData instances are equal
        /// </summary>
        /// <param name="other">Instance of AddCourseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddCourseData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    AddAfterId == other.AddAfterId ||
                    AddAfterId != null &&
                    AddAfterId.Equals(other.AddAfterId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AddAfterId != null)
                    hashCode = hashCode * 59 + AddAfterId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(AddCourseData left, AddCourseData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddCourseData left, AddCourseData right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
