/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CategoryContentEntry : IEquatable<CategoryContentEntry>
    {
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category")]
        public Category Category { get; set; }

        /// <summary>
        /// The article that is part of this content. OBSOLETE. Use the .article property instead.
        /// </summary>
        /// <value>The article that is part of this content. OBSOLETE. Use the .article property instead.</value>
        [DataMember(Name = "articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// Gets or Sets Article
        /// </summary>
        [DataMember(Name = "article")]
        public Article2 Article { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryContentEntry {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Article: ").Append(Article).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CategoryContentEntry)obj);
        }

        /// <summary>
        /// Returns true if CategoryContentEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of CategoryContentEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryContentEntry other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) &&
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) &&
                (
                    Article == other.Article ||
                    Article != null &&
                    Article.Equals(other.Article)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                if (Article != null)
                    hashCode = hashCode * 59 + Article.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CategoryContentEntry left, CategoryContentEntry right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CategoryContentEntry left, CategoryContentEntry right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
