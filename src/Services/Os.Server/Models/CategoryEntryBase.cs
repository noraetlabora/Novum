/*
 * OrderSolution HTTP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Os.Server.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CategoryEntryBase : IEquatable<CategoryEntryBase>
    {
        /// <summary>
        /// Defines the color that will be assigned to this button in the article chooser (right bottom of the order screen). This can be used to allow better orientation for the user on this screen. Note: Which part of the button will be colored depends on the current client implementation.
        /// </summary>
        /// <value>Defines the color that will be assigned to this button in the article chooser (right bottom of the order screen). This can be used to allow better orientation for the user on this screen. Note: Which part of the button will be colored depends on the current client implementation.</value>
        [DataMember(Name = "bgColor")]
        public string BgColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryEntryBase {\n");
            sb.Append("  BgColor: ").Append(BgColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CategoryEntryBase)obj);
        }

        /// <summary>
        /// Returns true if CategoryEntryBase instances are equal
        /// </summary>
        /// <param name="other">Instance of CategoryEntryBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryEntryBase other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    BgColor == other.BgColor ||
                    BgColor != null &&
                    BgColor.Equals(other.BgColor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (BgColor != null)
                    hashCode = hashCode * 59 + BgColor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CategoryEntryBase left, CategoryEntryBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CategoryEntryBase left, CategoryEntryBase right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
